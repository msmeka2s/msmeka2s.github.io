[
  {
    "name": "Übung 1 - Einführung",
    "learningObjectives": [
      "Die Geschichte des WWW beschreiben können.",
      "Grundbegriffe des WWW erklären können.",
      "Die Paradigmen der WWW-Technologien erläutern können.",
      "Das HTTP-Protokoll beschreiben können.",
      "Die wichtigsten HTTP-Fehlercodes kennen und erläutern können.",
      "Uniform Resource Identifier (URI) und deren Anwendung erklären können.",
      "HTML beschreiben und anwenden können.",
      "Wireframes mit HTML nachbauen können.",
      "CSS beschreiben und anwenden können.",
      "Spezifität von CSS-Selektoren berechnen können.",
      "RGB in HSL und umgekehrt mit DevTools umrechnen können.",
      "Wireframes mit HTML und CSS nachbauen können.",
      "Eigene Homepage mit HTML und CSS erstellen können.",
      "Eigene Homepage auf Linux-Server installieren können."
    ],
    "items": [
      {
        "heading": "Fachliche Argumentation über Erfolgsprinzipien des WWW",
        "name": "Übung 1.1 - WWW",
        "task": null,
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Fachliche Argumentation über Erfolgsprinzipien des WWW</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tmargin: 15px 0 0;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"item\">\n\t\t\t<h2>Mit welchen fachlichen Argumenten wurde das WWW-Proposal von TBL abgelehnt?</h2>\n\t\t\t<p>der Vorgesetzte von TBL hat die Vagheit in dem Konzept nicht verstanden und mit der\n\t\t\t\tEvaluierbarkeit verwechselt. Außerdem hatte die Hypertext-Community den Eindruck, dass sie in der\n\t\t\t\tWissenschaft schon weiter voran geschritten war, und dass das Konzept von TBL ein Rückschritt\n\t\t\t\tgewesen wäre. Das lag unter anderem daran, dass es in dem Konzept möglich war \"broken links\" zu\n\t\t\t\thaben, also Links, die ins leere zeigen.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Was sind die fachlichen Argumente, warum das WWW dennoch ein Erfolg wurde?</h2>\n\t\t\t<p>Das WWW wurde dennoch ein Erfolg, da es möglich war die unterschiedlichen Technologien unabhängig\n\t\t\t\tvoneinander in mehreren Dimensionen weiter zu entwickeln und das ohne zentrale Kontrolle.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Was wäre der Preis für die garantierte Verhinderung von “broken links”?</h2>\n\t\t\t<p>Wenn man versuchen würde, \"broken links\" zu verhindern, könnte die Dezentralität des WWW nicht mehr gewährleistet werden.</p>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://www.w3.org/"
        ]
      },
      {
        "heading": "HTTP",
        "name": "Übung 1.2 - HTTP",
        "task": null,
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>HTTP</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tmargin: 15px 0 0;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"item\">\n\t\t\t<h2>Sie bekommen im Browser den HTTP Status Code 200. Was bedeutet das?</h2>\n\t\t\t<p>Der Status Code 200 bedeutet, dass die Anfrage erfolgreich bearbeitet wurde und das Ergebnis der\n\t\t\t\tAnfrage in der Antwort übertragen wird.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Sie bekommen im Browser den HTTP Status Code 301. Was hat das zu bedeuten?</h2>\n\t\t\t<p>Der Status Code 301 bedeutet, dass die angeforderte Ressource ab sofort unter der im\n\t\t\t\t„Location“-Header-Feld angegebenen Adresse bereitsteht (auch Redirect genannt). Die alte Adresse\n\t\t\t\tist nicht länger gültig.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Sie bekommen im Browser den HTTP Status Code 400. Was hat das zu bedeuten? Was können Sie dagegen tun?</h2>\n\t\t\t<p>Der Status Code 400 bedeutet, dass die Anfrage-Nachricht fehlerhaft aufgebaut war. Um das zu\n\t\t\t\tverhindern, müssen die Daten, die an den Server übermittelt werden das richtige Format und die\n\t\t\t\trichtige Syntax haben, um vom Server richtig interpretiert werden zu können.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Sie bekommen im Browser den HTTP Status Code 403. Was hat das zu bedeuten? Was können Sie dagegen tun?</h2>\n\t\t\t<p>Der Status Code 403 bedeutet, dass die Anfrage  mangels Berechtigung des Clients nicht durchgeführt wurde,\n\t\t\t\tbspw. weil der authentifizierte Benutzer nicht berechtigt ist oder eine als HTTPS konfigurierte URL nur\n\t\t\t\tmit HTTP aufgerufen wurde.</p>\n\t\t\t<p>Um diesen Status Code zu vermeiden ist es wichtig sicher zu stellen, dass der Benutzer, der diese URL\n\t\t\t\taufruft, auch über die notwendige Zugriffsberechtigung verfügt.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>In einer Webanwendung benötigen Sie eine OPTIONS-Anfrage, die die Optionen des Servers vor dem\n\t\t\t\teigentlichen Zugriff erfragen soll. Aus Performanzgründen soll die Abfrage jedoch cacheable sein.\n\t\t\t\tWie könnten Sie dafür eine Lösung angehen?</h2>\n\t\t\t<p>Es ist zwar von den Erfindern so gewünscht, dass die OPTIONS-Anfrage nicht cacheable ist.\n\t\t\t\tDieser Mechanismus muss allerdings von den Programmierern selbst umgesetzt werden. So kann der\n\t\t\t\tProgrammierer sich auch dazu entscheiden, die Antwort der OPTIONS-Anfrage einfach im Cache zu speichern.</p>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/HTTP/Status"
        ]
      },
      {
        "heading": "Tribute Page",
        "name": "Übung 1.3 - Tribute Page",
        "task": "Mit welchem HTML- und CSS-Code kann man diesen Wireframe möglichst exakt nachbilden?\nSchreiben Sie Ihren CSS-Code direkt in die HTML-Datei. Für das Bild dürfen Sie die URL /wem/assets/img/tribute-img.png verwenden.\nGeben Sie Ihren HTML- und CSS-Quellcode zusammen in dieses Textfeld ein:",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Tribute Page</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #eee;\n\t\t\t\tpadding:  20px 0 10px;\n\t\t\t}\n\t\t\t.imageContent {\n\t\t\t\tpadding:  0 20px;\n\t\t\t}\n\t\t\t.imageContent img {\n\t\t\t\tmax-width: 100%;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"header\">\n\t\t\t<h1>Dr. Norman Borlaug</h1>\n\t\t\t<p>The man who saved a billion lives</p>\n\t\t</div>\n\t\t<div class=\"imageContent\">\n\t\t\t<img alt=\"tribute-img\" src=\"img/tribute-img.png\" />\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/HTML",
          "https://developer.mozilla.org/de/docs/Web/CSS"
        ]
      },
      {
        "heading": "Survey Form",
        "name": "Übung 1.4 - Survey Form",
        "task": "Hinweis zu den Farben: Firefox DevTools anthalten eine Pipette namens \"Eyedropper\", mit der man die Farben aus einer Webseite auslesen kann. Die grünliche Farbe im Rahmen des Wireframes ist demnach #b2d6d1, \n\nHinweis zu den Schriften (Fonts): Die größte Sammlung an \"kostenlosen\" Web-Schriften stammt von Google und ist unter Google Fonts zu finden. Wer lieber aus dem Vorrat an vorhanden Schriften auswählt, wird unter websichere Schriften fündig.\n\nMit welchem HTML- und CSS-Code kann man diesen Wireframe möglichst exakt nachbilden?\nSchreiben Sie Ihren CSS-Code direkt in die HTML-Datei. Geben Sie Ihren HTML- und CSS-Quellcode zusammen in dieses Textfeld ein:",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Survey Form</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.formContainer {\n\t\t\t\tbackground: #b2d6d1;\n\t\t\t\tpadding: 20px 0 10px;\n\t\t\t}\n\t\t\t.formContainer h1 {\n\t\t\t\tmargin: 0 0 20px;\n\t\t\t}\n\t\t\t.formContainer form {\n\t\t\t\tmargin: 0 15px;\n\t\t\t\tbackground: #FAFAFA;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 20px 0;\n\t\t\t}\n\t\t\t.formContainer form .row {\n\t\t\t\tdisplay:  flex;\n\t\t\t\tmargin-top: 20px;\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\t.formContainer form .row > * {\n\t\t\t\tmargin: 0 10px;\n\t\t\t}\n\t\t\t.formContainer form .row > label {\n\t\t\t    text-align: left;\n\t\t\t\tfont-size: 16px;\n\t\t\t\tmargin: 0 16px;\n\t\t\t}\n\t\t\t.formContainer form .row > input {\n\t\t\t\tpadding: 6px 4px;\n\t\t\t\tmargin: 5px 16px 0;\n\t\t\t}\n\t\t\t.formContainer form .row > select {\n\t\t\t\tpadding: 6px 4px;\n\t\t\t\tmargin: 5px 16px 0;\n\t\t\t}\n\t\t\t.formContainer form .row > .options {\n\t\t\t\ttext-align: left;\n\t\t\t\tmargin-top: 5px;\n\t\t\t}\n\t\t\t.formContainer form .row > .options label {\n\t\t\t\tfont-size: 16px;\n\t\t\t}\n\t\t\t.formContainer form .row > .options > div {\n\t\t\t\tmargin-bottom: 2px;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.formContainer form {\n\t\t\t\t\tmargin: 0 50px;\n\t\t\t\t}\n\t\t\t\t.formContainer form .row {\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t}\n\t\t\t\t.formContainer form .row > input {\n\t\t\t\t\twidth: 25%;\n\t\t\t\t}\n\t\t\t\t.formContainer form .row > label {\n\t\t\t\t\ttext-align: right;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t}\n\t\t\t\t.formContainer form .row > select {\n\t\t\t\t\twidth: 27%;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@media (min-width: 1200px) {\n\t\t\t\t.formContainer form .row > select {\n\t\t\t\t\twidth: 12%;\n\t\t\t\t}\n\t\t\t\t.formContainer form .row > input,\n\t\t\t\t.formContainer form .row > select,\n\t\t\t\t.formContainer form .row > .options {\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"formContainer\">\n\t\t\t<h1>Survey Form</h1>\n\t\t\t<form>\n\t\t\t\t<p>Let us know how we can improve freeCodeCamp</p>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"name\">* Name:</label>\n\t\t\t\t\t<input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"email\">* Email:</label>\n\t\t\t\t\t<input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"age\">* Age:</label>\n\t\t\t\t\t<input type=\"number\" id=\"age\" name=\"age\" placeholder=\"Age\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"role\">Which option best describes your current role?</label>\n\t\t\t\t\t<select id=\"role\" name=\"role\">\n\t\t\t\t\t\t<option value=\"student\">Student</option>\n\t\t\t\t\t\t<option value=\"teacher\">Teacher</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"age\">* How likely is that your would recommend freeCodeCamp to a friend?</label>\n\t\t\t\t\t<div class=\"options\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"radio\" id=\"definitely\" name=\"recommend\" value=\"definitely\">\n\t\t\t\t\t\t  <label for=\"definitely\">Definitely</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"radio\" id=\"maybe\" name=\"recommend\" value=\"maybe\">\n\t\t\t\t\t\t  <label for=\"maybe\">Maybe</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"radio\" id=\"notSure\" name=\"recommend\" value=\"notSure\">\n\t\t\t\t\t\t  <label for=\"notSure\">Not sure</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"age\">What do you like most in FCC:</label>\n\t\t\t\t\t<select id=\"fcc\" name=\"fcc\">\n\t\t\t\t\t\t<option value=\"\">Select an option</option>\n\t\t\t\t\t\t<option value=\"option1\">Option 1</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label for=\"age\">Things that should be improved in the future <br> (Check all that apply):</label>\n\t\t\t\t\t<div class=\"options\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"checkbox\" id=\"frontend\" name=\"improve\" value=\"frontend\">\n\t\t\t\t\t\t  <label for=\"frontend\">Front-end Projects</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"checkbox\" id=\"backend\" name=\"improve\" value=\"backend\">\n\t\t\t\t\t\t  <label for=\"backend\">Back-end Projects</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  <input type=\"checkbox\" id=\"dataVisualization\" name=\"improve\" value=\"dataVisualization\">\n\t\t\t\t\t\t  <label for=\"dataVisualization\">Data Visualization</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/HTML",
          "https://developer.mozilla.org/de/docs/Web/CSS"
        ]
      },
      {
        "heading": "Product Landing Page",
        "name": "Übung 1.5 - Product Landing Page",
        "task": "Mit welchem HTML- und CSS-Code kann man diesen Wireframe möglichst exakt nachbilden?\nFür das Bild dürfen Sie die URL /wem/assets/img/landing-img.png verwenden.\nSchreiben Sie Ihren CSS-Code direkt in die HTML-Datei. Geben Sie Ihren HTML- und CSS-Quellcode zusammen in dieses Textfeld ein:",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Product Landing Page</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\t.button {\n\t\t\t\ttext-decoration: none;\n\t\t\t\tbackground: #F88E37;\n\t\t\t\tcolor: white;\n\t\t\t\ttext-transform: uppercase;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 10px;\n\t\t\t\twidth:  70%;\n\t\t\t\tdisplay: block;\n\t\t\t\ttext-align: center;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tmargin:  0 auto;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #363636;\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 10px 0;\n\t\t\t}\n\t\t\t.header .nav {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\t\t\t.header a {\n\t\t\t\tcolor: white;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tflex-basis: 50%;\n\t\t\t\tmargin: 4px 0;\n\t\t\t}\n\t\t\t.mainContent {\n\t\t\t\tbackground: #EBEAE6;\n\t\t\t\tpadding: 20px 0 10px;\n\t\t\t}\n\t\t\t.mainContent h1 {\n\t\t\t\tmargin: 0 0 20px;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.mainContent .product {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\t.mainContent .product > * {\n\t\t\t\twidth: 50%;\n\t\t\t}\n\t\t\t.mainContent .product .imgContainer {\n\t\t\t\ttext-align: center;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.mainContent .product .imgContainer img {\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tborder: 1px solid #000;\n\t\t\t\tmax-width: 100%;\n\t\t\t\twidth: 70%;\n\t\t\t}\n\t\t\t.mainContent .product .info {\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 20px 10px 0;\n\t\t\t\twidth: 100%;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\t\t\t.mainContent .product .info p {\n\t\t\t\tmargin:  30px 0;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground: #011826;\n\t\t\t\tcolor: white;\n\t\t\t\tpadding:  1px 0 30px;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.header {\n\t\t\t\t\tpadding: 20px 0;\n\t\t\t\t}\n\t\t\t\t.header .nav {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.header a {\n\t\t\t\t\tmargin: 0 10px;\n\t\t\t\t}\n\t\t\t\t.mainContent .product {\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t}\n\t\t\t\t.mainContent .product .info p {\n\t\t\t\t\tmargin: 50px 0;\n\t\t\t\t}\n\t\t\t\t.button {\n\t\t\t\t\twidth: 50%;\n\t\t\t\t}\n\t\t\t\t.footer {\n\t\t\t\t\tpadding-top: 30px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"header\">\n\t\t\t<div class=\"nav\">\n\t\t\t\t<a href=\"javascript:void(0);\">The book series</a>\n\t\t\t\t<a href=\"javascript:void(0);\">Textimonials</a>\n\t\t\t\t<a href=\"javascript:void(0);\">The Author</a>\n\t\t\t\t<a href=\"javascript:void(0);\">Free resources</a>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"mainContent\">\n\t\t\t<h1>You dont know JavScript</h1>\n\t\t\t<div class=\"product\">\n\t\t\t\t<div class=\"imgContainer\">\n\t\t\t\t\t<img alt=\"product-cover\" src=\"img/landing-img.png\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"info\">\n\t\t\t\t\t<p>Don't just drift through Javascript.</p>\n\t\t\t\t\t<p>Understand how Javascript works</p>\n\t\t\t\t\t<p>Start your journey through the bumpy side of Javascript</p>\n\t\t\t\t\t<a href=\"javascript:void(0);\" class=\"button\">Order your copy now</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"footer\">\n\t\t\t<p>The first ebook in the book series is absolutely free.</p>\n\t\t\t<a href=\"javascript:void(0);\" class=\"button\">Find out more about this offer</a>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/HTML",
          "https://developer.mozilla.org/de/docs/Web/CSS"
        ]
      }
    ]
  },
  {
    "name": "Übung 2 - Responsives Web",
    "learningObjectives": [
      "Responsive Web Design (RWD) erläutern können.",
      "Wireframes mit HTML und CSS responsiv nachbauen können.",
      "Eigene Homepage mit HTML und CSS responsiv gestalten können.",
      "Flexbox-Layout einsetzen können.",
      "Grid Layout anwenden können.",
      "Die 10 technischen CSS-Mittel für Responsive Web Design (RWD) erläutern und anwenden können.",
      "Wireframes mit Flexbox und Grid nachbauen können.",
      "Eigene Homepage mit Flexbox und Grid gestalten können.",
      "CSS-Präprozessoren wählen und einsetzen können.",
      "CSS-Frameworks wählen und einsetzen können."
    ],
    "items": [
      {
        "heading": "Flexbox",
        "name": "Übung 2.1 - Flexbox",
        "task": "Spielen Sie zunächst das Flexbox Froggy-Spiel, um Flexbox zu lernen.\n\nImplementieren Sie dann ausschließlich mit HTML und CSS Flexbox folgendes responsive Webdesign nach der Desktop-First-Strategie!",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Responsiv mit Flexbox Desktop-First</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\thtml, body, .content {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\t.content {\n\t\t\t\tmargin: 20px 40px;\n\t\t\t}\n\t\t\t.flexContainer {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.flexContainer.topbar {\n\t\t\t\theight: 30%;\n\t\t\t}\n\t\t\t.flexContainer.mainContent {\n\t\t\t\theight: 60%;\n\t\t\t\tgap: 10px;\n\t\t\t\tmargin-top: 20px;\n\t\t\t}\n\t\t\t.redSquare {\n\t\t\t\tbackground: red;\n\t\t\t\tflex-basis: 100%;\n\t\t\t}\n\t\t\t.greenSquare {\n\t\t\t\tbackground: #0f0;\n\t\t\t\tflex-basis: 20%;\n\t\t\t}\n\t\t\t.blueSquare {\n\t\t\t\tbackground: blue;\n\t\t\t\tflex-basis: 60%;\n\t\t\t}\n\t\t\t.violetSquare {\n\t\t\t\tbackground: violet;\n\t\t\t\tflex-basis: 20%;\n\t\t\t}\n\t\t\t@media (max-width: 768px) {\n\t\t\t\t.content {\n\t\t\t\t\tmargin: 40px 20px;\n\t\t\t\t}\n\t\t\t\t.flexContainer.mainContent {\n\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\theight: 120%;\n\t\t\t\t\tgap: 4px;\n\t\t\t\t}\n\t\t\t\t.greenSquare {\n\t\t\t\t\tflex-basis: 32%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\t\t\t\t.blueSquare {\n\t\t\t\t\tflex-basis: 66%;\n\t\t\t\t}\n\t\t\t\t.violetSquare {\n\t\t\t\t\tflex-basis: 100%;\n\t\t\t\t\theight: 20%;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@media (max-width: 375px) {\n\t\t\t\t.content {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t\t.flexContainer.topbar {\n\t\t\t\t\theight: 20%;\n\t\t\t\t}\n\t\t\t\t.flexContainer.mainContent {\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t\tgap: 0;\n\t\t\t\t}\n\t\t\t\t.redSquare {\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\t\t\t\t.greenSquare {\n\t\t\t\t\tflex-basis: 100%;\n\t\t\t\t\theight: 20%;\n\t\t\t\t}\n\t\t\t\t.blueSquare {\n\t\t\t\t\tflex-basis: 100%;\n\t\t\t\t\theight: 120%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"content\">\n\t\t\t<div class=\"flexContainer topbar\">\n\t\t\t\t<div class=\"redSquare\">&nbsp;</div>\n\t\t\t</div>\n\t\t\t<div class=\"flexContainer mainContent\">\n\t\t\t\t<div class=\"greenSquare\">&nbsp;</div>\n\t\t\t\t<div class=\"blueSquare\">&nbsp;</div>\n\t\t\t\t<div class=\"violetSquare\">&nbsp;</div>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/CSS",
          "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox",
          "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
        ]
      },
      {
        "heading": "Grid",
        "name": "Übung 2.2 - Grid",
        "task": "Spielen Sie zunächst das Grid Garden -Spiel, um Grid Layout zu lernen.\n\nImplementieren Sie dann das gleiche responsive Webdesign wie in Aufgabe 2.1 allerdings mit Grid und der Mobile-First-Strategie! Vermeiden Sie diesmal außerdem das Erscheinen von Scrollbars.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Responsiv mit Flexbox Desktop-First</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\thtml, body, .gridContainer {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\t.gridContainer {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-rows: 20% 20% 120% 20%;\n\t\t\t}\n\t\t\t.redSquare {\n\t\t\t\tbackground: red;\n\t\t\t}\n\t\t\t.greenSquare {\n\t\t\t\tbackground: #0f0;\n\t\t\t}\n\t\t\t.blueSquare {\n\t\t\t\tbackground: blue;\n\t\t\t}\n\t\t\t.violetSquare {\n\t\t\t\tbackground: violet;\n\t\t\t}\n\t\t\t@media (min-width: 375px) {\n\t\t\t\t.gridContainer {\n\t\t\t\t\tgrid-template-columns: 33% 66%;\n\t\t\t\t\tgrid-template-rows: 25% 100% 20%;\n\t\t\t\t\tcolumn-gap: 4px;\n\t\t\t\t\trow-gap: 10px;\n\t\t\t\t\tmargin: 30px 20px;\n\t\t\t\t}\n\t\t\t\t.redSquare, .violetSquare {\n\t\t\t\t\tgrid-column-start: 1;\n\t\t\t\t\tgrid-column-end: 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.gridContainer {\n\t\t\t\t\tmargin: 20px 40px;\n\t\t\t\t\tgrid-template-columns: 20% 60% 20%;\n\t\t\t\t\tgrid-template-rows: 30% 60%;\n\t\t\t\t\tcolumn-gap: 10px;\n\t\t\t\t\trow-gap: 20px;\n\t\t\t\t}\n\t\t\t\t.redSquare {\n\t\t\t\t\tgrid-column-end: 4;\n\t\t\t\t}\n\t\t\t\t.violetSquare {\n\t\t\t\t\tgrid-column-start: 3;\n\t\t\t\t\tgrid-column-end: 4;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"gridContainer\">\n\t\t\t<div class=\"redSquare\">&nbsp;</div>\n\t\t\t<div class=\"greenSquare\">&nbsp;</div>\n\t\t\t<div class=\"blueSquare\">&nbsp;</div>\n\t\t\t<div class=\"violetSquare\">&nbsp;</div>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/CSS",
          "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Grid_Layout",
          "https://css-tricks.com/snippets/css/complete-guide-grid/"
        ]
      },
      {
        "heading": "Holy Grail - Flexbox",
        "name": "Übung 2.3 Holy Grail (Flexbox)",
        "task": "Implementieren Sie ausschließlich mit HTML und CSS folgendes responsive Webdesign. Vermeiden Sie das Erscheinen von Scrollbars so weit wie möglich. Andererseits sollten der Viewport sowohl horizontal als auch vertikal zu 100% genutzt werden, d.h. vermeiden Sie weiße Flächen.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Holy Grail mit Flexbox</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 99%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.leftSide ul,\n\t\t\t.rightSide ul {\n\t\t\t\tpadding: 0;\n\t\t\t\tlist-style: none;\n\t\t\t}\n\t\t\t.leftSide ul li,\n\t\t\t.rightSide ul li {\n\t\t\t\tfont-size: 20px;\n\t\t\t\tdisplay: inline;\n\t\t\t}\n\t\t\t.flexContainer {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\tmargin: 10px;\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tcolor:  white;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #c04f50;\n\t\t\t\tborder-radius: 10px 10px 0 0;\n\t\t\t\tpadding: 0 5px 8px;\n\t\t\t}\n\t\t\t.header .nav {\n\t\t\t\ttext-align: left;\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\t\t\t.header .nav a {\n\t\t\t\tbackground: #6A709F;\n\t\t\t\tcolor: black;\n\t\t\t\tborder-radius: 20px;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tpadding: 4px 30px;\n\t\t\t\tmargin: 3px 5px;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-family: Arial;\n\t\t\t\tborder: 2px outset #F9FBFC;\n\t\t\t\tfont-size: 14px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tflex-basis: 10%;\n\t\t\t}\n\t\t\t.main {\n\t\t\t\tdisplay: flex;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\t.leftSide, .rightSide {\n\t\t\t\tbackground: #C28280;\n\t\t\t}\n\t\t\t.mainContent {\n\t\t\t\tbackground: #6D9FBF;\n\t\t\t\toverflow-y: auto;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t\tbackground: black;\n\t\t\t\tpadding-bottom: 15px;\n\t\t\t\tborder-radius: 0 0 10px 10px;\n\t\t\t}\n\t\t\t.footer span {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t\t.footer a {\n\t\t\t\tcolor: white;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.flexContainer {\n\t\t\t\t\theight: 98%;\n\t\t\t\t}\n\t\t\t\t.header h2,\n\t\t\t\t.footer h2 {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tfont-weight: normal;\n\t\t\t\t}\n\t\t\t\t.header .nav {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t}\n\t\t\t\t.main {\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t}\n\t\t\t\t.leftSide, .rightSide {\n\t\t\t\t\tpadding: 0 4rem;\n\t\t\t\t}\n\t\t\t\t.leftSide ul,\n\t\t\t\t.rightSide ul {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t\t.footer span {\n\t\t\t\t\tdisplay: inline;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@media (min-width: 1200px) {\n\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"flexContainer\">\n\t\t\t<div class=\"header\">\n\t\t\t\t<h2>Header</h2>\n\t\t\t\t<div class=\"nav\">\n\t\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t\t\t<a href=\"#\">News</a>\n\t\t\t\t\t<a href=\"#\">Contact</a>\n\t\t\t\t\t<a href=\"#\">About</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"main\">\n\t\t\t\t<div class=\"leftSide\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>left</li>\n\t\t\t\t\t\t<li>menu</li>\n\t\t\t\t\t\t<li>with</li>\n\t\t\t\t\t\t<li>many</li>\n\t\t\t\t\t\t<li>items</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"mainContent\">\n\t\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.   \n\n\tDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.   \n\n\tUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   \n\n\tNam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   \n\n\tDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.   \n\n\tAt vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.   \n\n\tConsetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.   \n\n\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.   \n\n\tDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.   \n\n\tUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   \n\n\tNam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rightSide\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>right</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<h2>Footer: \n\t\t\t\t\t<span>\t\n\t\t\t\t\t\t<a href=\"#\">Sitemap</a>\n\t\t\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t\t\t\t<a href=\"#\">News</a>\n\t\t\t\t\t\t<a href=\"#\">Contact</a>\n\t\t\t\t\t\t<a href=\"#\">About</a>\n\t\t\t\t\t</span>\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/CSS",
          "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox",
          "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
          "https://en.wikipedia.org/wiki/Holy_grail_(web_design)"
        ]
      },
      {
        "heading": "Holy Grail - Grid",
        "name": "Übung 2.3 - Holy Grail (Grid)",
        "task": "Implementieren Sie ausschließlich mit HTML und CSS folgendes responsive Webdesign. Vermeiden Sie das Erscheinen von Scrollbars so weit wie möglich. Andererseits sollten der Viewport sowohl horizontal als auch vertikal zu 100% genutzt werden, d.h. vermeiden Sie weiße Flächen.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Responsiv mit Flexbox Desktop-First</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.gridContainer {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template: auto 1fr auto / auto 1fr auto;\n\t\t\t\tmargin: 10px;\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tcolor:  white;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.leftSide ul,\n\t\t\t.rightSide ul {\n\t\t\t\tpadding: 0;\n\t\t\t\tlist-style: none;\n\t\t\t}\n\t\t\t.leftSide ul li,\n\t\t\t.rightSide ul li {\n\t\t\t\tfont-size: 20px;\n\t\t\t\tdisplay: inline;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #c04f50;\n\t\t\t\tborder-radius: 10px 10px 0 0;\n\t\t\t\tpadding: 0 5px 15px;\n\t\t\t}\n\t\t\t.header .nav {\n\t\t\t\ttext-align: left;\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\t\t\t.header .nav a {\n\t\t\t\tbackground: #6A709F;\n\t\t\t\tcolor: black;\n\t\t\t\tborder-radius: 20px;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tpadding: 4px 30px;\n\t\t\t\tmargin: 3px 5px;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-family: Arial;\n\t\t\t\tborder: 2px outset #F9FBFC;\n\t\t\t\tfont-size: 14px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tflex-basis: 10%;\n\t\t\t}\n\t\t\t.header, .footer {\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.leftSide, .rightSide {\n\t\t\t\tbackground: #C28280;\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.mainContent {\n\t\t\t\tbackground: #6D9FBF;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t\tbackground: black;\n\t\t\t\tpadding-bottom: 15px;\n\t\t\t\tborder-radius: 0 0 10px 10px;\n\t\t\t}\n\t\t\t.footer span {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t\t.footer a {\n\t\t\t\tcolor: white;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.gridContainer {\n\t\t\t\t\theight: 95%;\n\t\t\t\t}\n\t\t\t\t.header h2,\n\t\t\t\t.footer h2 {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tfont-weight: normal;\n\t\t\t\t}\n\t\t\t\t.leftSide ul,\n\t\t\t\t.rightSide ul {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t\t.leftSide ul li,\n\t\t\t\t.rightSide ul li {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.header .nav {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t}\n\t\t\t\t.leftSide {\n\t\t\t\t\tgrid-column: 1 / 1;\n\t\t\t\t\tpadding: 0 4rem;\n\t\t\t\t}\n\t\t\t\t.mainContent {\n\t\t\t\t\tgrid-column: 2 / 2;\n\t\t\t\t}\n\t\t\t\t.rightSide {\n\t\t\t\t\tgrid-column: 3 / 3;\n\t\t\t\t\tpadding: 0 4rem;\n\t\t\t\t}\n\t\t\t\t.footer span {\n\t\t\t\t\tdisplay: inline;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"gridContainer\">\n\t\t\t<div class=\"header\">\n\t\t\t\t<h2>Header</h2>\n\t\t\t\t<div class=\"nav\">\n\t\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t\t\t<a href=\"#\">News</a>\n\t\t\t\t\t<a href=\"#\">Contact</a>\n\t\t\t\t\t<a href=\"#\">About</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"leftSide\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li>left</li>\n\t\t\t\t\t<li>menu</li>\n\t\t\t\t\t<li>with</li>\n\t\t\t\t\t<li>many</li>\n\t\t\t\t\t<li>items</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div class=\"mainContent\">\n\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.   \n\nDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.   \n\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   \n\nNam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   \n\nDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.   \n\nAt vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.   \n\nConsetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus.   \n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.   \n\nDuis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.   \n\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   \n\nNam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo\n\t\t\t</div>\n\t\t\t<div class=\"rightSide\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li>right</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<h2>Footer: \n\t\t\t\t\t<span>\t\n\t\t\t\t\t\t<a href=\"#\">Sitemap</a>\n\t\t\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t\t\t\t<a href=\"#\">News</a>\n\t\t\t\t\t\t<a href=\"#\">Contact</a>\n\t\t\t\t\t\t<a href=\"#\">About</a>\n\t\t\t\t\t</span>\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/CSS",
          "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Grid_Layout",
          "https://css-tricks.com/snippets/css/complete-guide-grid/",
          "https://en.wikipedia.org/wiki/Holy_grail_(web_design)"
        ]
      },
      {
        "heading": "Responsiv mit Grid",
        "name": "Übung 2.4 - Responsiv mit Grid",
        "task": "Implementieren Sie folgende Landing Page responsiv mit Grid Layout. Vermeiden Sie außerdem das Erscheinen von Scrollbars so weit wie möglich.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Product Landing Page</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.gridContainer {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template: auto auto 1fr auto / 1fr 1fr;\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\t.button {\n\t\t\t\ttext-decoration: none;\n\t\t\t\tbackground: #F88E37;\n\t\t\t\tcolor: white;\n\t\t\t\ttext-transform: uppercase;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 10px;\n\t\t\t\twidth:  70%;\n\t\t\t\tdisplay: block;\n\t\t\t\ttext-align: center;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tmargin:  0 auto;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #363636;\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 20px 0;\n\t\t\t\tgrid-column: 1 / 3;\n\t\t\t}\n\t\t\t.nav {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\t}\n\t\t\t.header a {\n\t\t\t\tcolor: white;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tmargin: 5px 0;\n\t\t\t}\n\t\t\t.heading {\n\t\t\t\tgrid-column: 1 / 3;\n\t\t\t\tmargin: 30px 0 0;\n\t\t\t}\n\t\t\t.heading h1 {\n\t\t\t\tmargin: 0 0 20px;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.mainContent {\n\t\t\t\tbackground: #EBEAE6;\n\t\t\t\tpadding: 20px 0 10px;\n\t\t\t}\n\t\t\t.imgContainer {\n\t\t\t\tgrid-column: 1 / 3;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.imgContainer img {\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tborder: 1px solid #000;\n\t\t\t\tmax-width: 70%;\n\t\t\t}\n\t\t\t.info {\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 20px 0;\n\t\t\t\tgrid-column: 1 / 3;\n\t\t\t}\n\t\t\t.info p {\n\t\t\t\tmargin:  30px 0;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground: #011826;\n\t\t\t\tcolor: white;\n\t\t\t\tpadding:  1px 0 30px;\n\t\t\t\tgrid-column: 1 / 3;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.button {\n\t\t\t\t\twidth: 50%;\n\t\t\t\t}\n\t\t\t\t.nav {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.header .nav a {\n\t\t\t\t\tmargin: 0 10px;\n\t\t\t\t}\n\t\t\t\t.imgContainer {\n\t\t\t\t\tgrid-column: 1 / 1;\n\t\t\t\t}\n\t\t\t\t.info {\n\t\t\t\t\tgrid-column: 2 / 2;\n\t\t\t\t}\n\t\t\t\t.info p {\n\t\t\t\t\tmargin:  50px 0;\n\t\t\t\t}\n\t\t\t\t.footer {\n\t\t\t\t\tpadding-top: 30px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"gridContainer\">\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"nav\">\n\t\t\t\t\t<a href=\"#\">The book series</a>\n\t\t\t\t\t<a href=\"#\">Textimonials</a>\n\t\t\t\t\t<a href=\"#\">The Author</a>\n\t\t\t\t\t<a href=\"#\">Free resources</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"heading\">\n\t\t\t\t<h1>You dont know JavaScript</h1>\n\t\t\t</div>\n\t\t\t<div class=\"imgContainer\">\n\t\t\t\t<img alt=\"product-cover\" src=\"img/landing-img.png\" />\n\t\t\t</div>\n\t\t\t<div class=\"info\">\n\t\t\t\t<p>Don't just drift through Javascript.</p>\n\t\t\t\t<p>Understand how Javascript works</p>\n\t\t\t\t<p>Start your journey through the bumpy side of Javascript</p>\n\t\t\t\t<a href=\"#\" class=\"button\">Order your copy now</a>\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<p>The first ebook in the book series is absolutely free.</p>\n\t\t\t\t<a href=\"#\" class=\"button\">Find out more about this offer</a>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/CSS",
          "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Grid_Layout",
          "https://css-tricks.com/snippets/css/complete-guide-grid/"
        ]
      }
    ]
  },
  {
    "name": "Übung 3 - Javascript",
    "learningObjectives": [
      "JavaScript-Konzepte erklären können.",
      "JavaScript-Programme lesen können.",
      "JavaScript-Programme selbst erstellen können.",
      "Closures in JavaScript programmieren können.",
      "Privatisierung in JavaScript programmieren können.",
      "ES6-Klassen in JavaScript programmieren können.",
      "IIFE-Pattern in JavaScript programmieren können."
    ],
    "items": [
      {

        "heading": "Funktionen in JavaScript",
        "name": "Übung 3.1 - Funktionen in JavaScript",
        "task": null,
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Funktionen in JavaScript</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th3 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tpre {\n\t\t\t\tbackground: rgb(51, 51, 51);\n\t\t\t\tpadding: 5px 20px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tcolor: #fff;\n\t\t\t\twhite-space: pre-wrap;\n\t\t\t}\n\t\t\tspan.highlighted {\n\t\t\t\tcolor: #c73030;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>Funktionen in JavaScript</h1>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">identity_function()</span>, die ein Argument als Parameter entgegen nimmt und\n\t\t\t\teine Funktion zurück gibt, die dieses Argument zurück gibt.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction identity_function(param) {\n    return () => param;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Addier-Funktion <span class=\"highlighted\">addf()</span>, so dass <span class=\"highlighted\">addf(x)(y)</span>\n\t\t\t\tgenau <span class=\"highlighted\">x + y</span> zurück gibt. (Es haben alsozwei Funktionsaufrufe zu erfolgen.\n\t\t\t\t<span class=\"highlighted\">addf(x)</span> liefert eine Funktion, die auf y angewandt wird.)</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction addf(x) {\n    return y => {\n        return x + y;\n    };\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">applyf()</span>, die aus einer binären Funktion\n\t\t\t\twie <span class=\"highlighted\">add(x,y)</span> eine Funktion <span class=\"highlighted\">addf</span>\n\t\t\t\tberechnet, die mit zwei Aufrufen das gleiche Ergebnis liefert, z.B. <span class=\"highlighted\">addf = applyf(add);\n\t\t\t\taddf(x)(y)</span> soll <span class=\"highlighted\">add(x,y)</span> liefern. Entsprechend\n\t\t\t\t<span class=\"highlighted\">applyf(mul)(5)(6)</span> soll <span class=\"highlighted\">30</span> liefern,\n\t\t\t\twenn <span class=\"highlighted\">mul</span> die binäre Multiplikation ist.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction applyf(functionName) {\n    return x => y => functionName(x, y);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">curry()</span> (von Currying), die eine binäre\n\t\t\t\tFunktion und ein Argument nimmt, um daraus eine Funktion zu erzeugen, die ein zweites Argument entgegen nimmt, z.B.\n\t\t\t\t<span class=\"highlighted\">add3 = curry(add, 3);add3(4)</span> ergibt <span class=\"highlighted\">7</span>.\n\t\t\t\t<span class=\"highlighted\">curry(mul, 5)(6)</span> ergibt <span class=\"highlighted\">30</span>.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction curry(functionName, param) {\n    return param2 => functionName(param, param2);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Erzeugen Sie die <span class=\"highlighted\">inc</span>-Funktion mit Hilfe einer der Funktionen\n\t\t\t\t<span class=\"highlighted\">addf, applyf</span> und <span class=\"highlighted\">curry</span> aus den\n\t\t\t\tletzten Aufgaben, ohne die Funktion <span class=\"highlighted\">inc()</span> selbst zu implementieren.\n\t\t\t\t(<span class=\"highlighted\">inc(x)</span> soll immer <span class=\"highlighted\">x + 1</span> ergeben\n\t\t\t\tund lässt sich natürlich auch direkt implementieren. Das ist aber hier nicht die Aufgabe.)\n\t\t\t\tVielleicht schaffen Sie es auch, drei Varianten der <span class=\"highlighted\">inc()</span>-Implementierung\n\t\t\t\tzu schreiben?</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction inc_addf(param) {\n    return addf(param)(1);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">methodize()</span>, die eine binäre Funktion (z.B. add, mul) in eine\n\t\t\t\tunäre Methode verwandelt. Nach Number.prototype.add = methodize(add); soll (3).add(4) genau 7 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction methodize(functionName) {\n    return function (param) {\n        return functionName(this, param);\n    }\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">demethodize()</span>, die eine unäre Methode (z.B. add, mul) in eine\n\t\t\t\tbinäre Funktion umwandelt. demethodize(Number.prototype.add)(5, 6) soll 11 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction demethodize(functionName) {\n    return (x, y) => functionName.call(x, y);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">twice()</span>, die eine binäre Funktion in eine unäre Funktion umwandelt,\n\t\t\t\tdie den einen Parameter zweimal weiter reicht. Z.B. var double = twice(add); double(11) soll\n\t\t\t\t22 ergeben; var square = twice(mul); square(11) soll mul(11,11) === 121 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction twice(functionName) {\n    return x => functionName(x, x);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">composeu()</span>, die zwei unäre Funktionen in eine einzelne unäre\n\t\t\t\tFunktion transformiert, die beide nacheinander aufruft, z.B. soll composeu(double, square)(3)\n\t\t\t\tgenau 36 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction composeu(function1, function2) {\n    return x => function2(function1(x));\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">composeb()</span>, die zwei binäre Funktionen in eine einzelne\n\t\t\t\tFunktion transformiert, die beide nacheinander aufruft, z.B. composeb(add, mul)(2, 3, 5) soll\n\t\t\t\t25 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction composeb(function1, function2) {\n    return (x, y, z) => function2(function1(x, y), z);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Funktion <span class=\"highlighted\">once()</span>, die einer anderen Funktion nur einmal erlaubt,\n\t\t\t\taufgerufen zu werden, z.B. add_once = once(add); add_once(3, 4) soll beim ersten Mal 7\n\t\t\t\tergeben, beim zweiten Mal soll jedoch add_once(3, 4) einen Fehlerabbruch bewirken.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction once(functionName) {\n    let executed = false;\n    return new Proxy(functionName, {\n        apply: function(receiver, ...args) {\n            if (executed) {\n                throw 'Die Funtktion darf nur einmal aufgerufen werden';\n            }\n            executed = true;\n            return functionName(...args[1]);\n        }\n    });\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine Fabrik-Funktion <span class=\"highlighted\">counterf()</span>, die zwei Funktionen inc() und dec() berechnet,\n\t\t\t\tdie einen Zähler hoch- und herunterzählen. Z.B. counter = counterf(10); Dann soll counter.inc()\n\t\t\t\t11 und counter.dec() wieder 10 ergeben.</h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction counterf(counterNumber) {\n    const counterObj = {\n        counter: counterNumber,\n        inc: function() {\n            this.counter++;\n            return this.counter;\n        },\n        dec: function() {\n            this.counter--;\n            return this.counter;\n        }\n    };\n    return counterObj;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Schreiben Sie eine rücknehmbare Funktion <span class=\"highlighted\">revocable()</span>, die als Parameter eine Funktion nimmt und\n\t\t\t\tdiese bei Aufruf ausführt. Sobald die Funktion aber mit <span class=\"highlighted\">revoke()</span> zurück genommen wurde, führt ein\n\t\t\t\terneuter Aufruf zu einem Fehler. Z.B. <br>\n\t\t\t\t<span class=\"highlighted\">temp = revocable(alert); <br>\n\t\t\t\ttemp.invoke(7); // führt zu alert(7); <br>\n\t\t\t\ttemp.revoke(); <br>\n\t\t\t\ttemp.invoke(8); // Fehlerabbruch!</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction revocable(functionName) {\n    const revokeableObj = {\n        revoked: false,\n        revoke: function() {\n            this.revoked = true;\n        },\n        invoke: function() {\n            if (this.revoked) {\n                throw 'Die Funktion wurde zurückgenommen';\n            }\n            return functionName(...arguments);\n        }\n    }\n    return revokeableObj;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Implementieren Sie ein \"Array Wrapper\"-Objekt mit den Methoden get, store und append, so dass\n\t\t\t\tein Angreifer keinen Zugriff auf das innere, private Array hat. <br>\n\t\t\t\t<span class=\"highlighted\">my_vector = vector(); <br>\n\t\t\t\tmy_vector.append(7); <br>\n\t\t\t\tmy_vector.store(1, 8); <br>\n\t\t\t\tmy_vector.get(0) // 7 <br>\n\t\t\t\tmy_vector.get(1) // 8</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction vector() {\n    const vectorObj = {\n        privateArray: [],\n        get: function(index) {\n            return this.privateArray[index]\n        },\n        store: function(index, number) {\n            this.privateArray[index] = number;\n        },\n        append: function(number) {\n            this.privateArray[this.privateArray.length] = number;\n        }\n    };\n    return vectorObj;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t</body>\n</html>",
            "type": "Javascript",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/JavaScript"
        ]
      },
      {
        "heading": "Advanced Functional JavaScript Programming",
        "name": "Übung 3.2 - Advanced Functional JavaScript Programming",
        "task": null,
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Advanced Functional JavaScript Programming</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th3 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tpre {\n\t\t\t\tbackground: rgb(51, 51, 51);\n\t\t\t\tpadding: 5px 20px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tcolor: #fff;\n\t\t\t\twhite-space: pre-wrap;\n\t\t\t}\n\t\t\tspan.highlighted {\n\t\t\t\tcolor: #c73030;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>Funktionen in JavaScript</h1>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that makes a publish/subscribe object. It will reliably deliver all publications to\n\t\t\t\tall subscribers in the right order. <br>\n\t\t\t\t<span class=\"highlighted\">my_pubsub = pubsub(); <br>\n\t\t\t\tmy_pubsub.subscribe(alert); <br>\n\t\t\t\tmy_pubsub.publish(\"It works!\"); // alert(\"It works!\")</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction pubsub() {\n    const pubsubObj = {\n        subscriptions: [],\n        subscribe: function(subscriber) {\n            this.subscriptions.push(subscriber);\n        },\n        publish: function(param) {\n            for (const subscription of this.subscriptions) {\n                subscription(param);\n            }\n        }\n    }\n    return pubsubObj;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a factory that makes functions that generate unique symbols. <br>\n\t\t\t\t<span class=\"highlighted\">gensym = gensymf('G'); <br>\n\t\t\t\tgensym() // 'G0' <br>\n\t\t\t\tgensym() // 'G1' <br>\n\t\t\t\tgensym() // 'G2' <br>\n\t\t\t\tgensym() // 'G3'</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction gensymf(prefix) {\n    let counter = 0;\n    return () => `${prefix}${counter++}`;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that returns a function that will return the next fibonacci number. <br>\n\t\t\t\t<span class=\"highlighted\">var fib = fibonaccif(0, 1); <br>\n\t\t\t\tfib() // 0 <br>\n\t\t\t\tfib() // 1 <br>\n\t\t\t\tfib() // 1 <br>\n\t\t\t\tfib() // 2 <br>\n\t\t\t\tfib() // 3 <br>\n\t\t\t\tfib() // 5</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction fibonaccif(param1, param2) {\n    let firstParam = param1;\n    let secondParam = param2;\n    return () => {\n        let result = firstParam;\n        firstParam = secondParam;\n        secondParam += result;\n        return result;\n    }\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function that adds from many invocations, until it sees an empty invocation. <br>\n\t\t\t\t<span class=\"highlighted\">addg(3)(4)(5)() // 12 <br>\n\t\t\t\taddg(1)(2)(4)(8)() // 15</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction addg(param) {\n    return nextParam => nextParam ? addg(param + nextParam) : param;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function that will take a binary function and apply it to many invocations. <br>\n\t\t\t\t<span class=\"highlighted\">applyg(add)(3)(4)(5)() // 12 <br>\n\t\t\t\tapplyg(add)(1)(2)(4)(8)() // 15</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction applyg(functionName, number, result) {\n    return functionName.call\n        ? option1 => applyg(option1, functionName, option1)\n        : option2 => option2\n            ? applyg(number(functionName, option2), number, number(functionName, option2))\n            : result\n        ;\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function <span class=\"highlighted\">m</span> that takes a value and an optional source string and returns them in an object. <br>\n\t\t\t\t<span class=\"highlighted\">JSON.stringify(m(1)) // {\"value\": 1, \"source\": \"1\"} <br>\n\t\t\t\tJSON.stringify(m(Math.PI, \"pi\")) // {\"value\": 3.14159..., \"source\": \"pi\"}</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction m(value, source) {\n    return {\n        value: value,\n        source: source ? source : value.toString()\n    };\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function <span class=\"highlighted\">addm</span> that takes two m objects and returns an\n\t\t\t\t<span class=\"highlighted\">m</span> object. <br>\n\t\t\t\t<span class=\"highlighted\">JSON.stringify(addm(m(3), m(4))) // {\"value\": 7, \"source\": \"(3+4)\"}</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction addm(object1, object2) {\n    const source1 = object1.source ? object1.source : object1.value;\n    const source2 = object2.source ? object2.source : object2.value;\n    return {\n        value: (object1.value + object2.value),\n        source: `(${source1}+${source2})`\n    };\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function <span class=\"highlighted\">binarymf</span> that takes a binary function and a string and returns a function that acts on m objects. <br>\n\t\t\t\t<span class=\"highlighted\">addm = binarymf(add, \"+\"); <br>\n\t\t\t\tJSON.stringify(addm(m(3), m(4))) // {\"value\": 7, \"source\": \"(3+4)\"}</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction binarymf(functionname, operator) {\n    return (x, y) => ({ value: functionname(x.value, y.value), source: `(${x.value}${operator}${y.value})` });\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Modify function <span class=\"highlighted\">binarymf</span> so that the functions it produces can accept arguments that are either numbers or m objects. <br>\n\t\t\t\t<span class=\"highlighted\">addm = binarymf(add, \"+\"); <br>\n\t\t\t\tJSON.stringify(addm(3, 4)) // {\"value\": 7, \"source\": \"(3+4)\"}</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction binarymf(functionName, operator) {\n    return (x, y) => {\n        return {\n            value: functionName(x.value || x, y.value || y),\n            source: `(${x.value || x}${operator}${y.value || y})`\n        }\n    };\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write function <span class=\"highlighted\">unarymf</span>, which is like <span class=\"highlighted\">binarymf</span>\n\t\t\t\texcept that it acts on unary functions. <br>\n\t\t\t\t<span class=\"highlighted\">squarem = unarymf(square, \"square\"); <br>\n\t\t\t\tJSON.stringify(squarem(4)) // {\"value\": 16, \"source\": \"(square 4)\"}</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction unarymf(functionName, operation) {\n    return (x) => ({ value: functionName(x.value || x), source: `(${operation} ${x.value || x})` });\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function that takes the lengths of two sides of a triangle and computes the length of the hypotenuse. (Hint: c2 = a2 + b2) <br>\n\t\t\t\t<span class=\"highlighted\">hyp(3, 4) // 5</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction hyp(side1, side2) {\n    return Math.hypot(side1, side2);\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Write a function that evaluates array expressions. <br>\n\t\t\t\t<span class=\"highlighted\">hypa = [ Math.sqrt, [ add, [mul, 3, 3], [mul, 4, 4] ] ]; <br>\n\t\t\t\texp(hypa) // 5</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction exp(array) {\n    return array[0](...array.slice(1).map(element => Array.isArray(element) ? exp(element) : element));\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that stores a value in a variable. <br>\n\t\t\t\t<span class=\"highlighted\">var variable; store(5); // variable === 5</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction store(newVariable) {\n    variable = newVariable\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that takes a binary function, two functions that provide operands, and a function that takes the result. <br>\n\t\t\t<span class=\"highlighted\">quatre( add, identityf(3), identityf(4), store ); // variable === 7</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction quatre(functionName, operand1, operand2, resultFunction) {\n    resultFunction(functionName(operand1(), operand2()))\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that takes a unary function, and returns a function that takes an argument and a callback. <br>\n\t\t\t<span class=\"highlighted\">sqrtc = unaryc(Math.sqrt); sqrtc(81, store) // variable === 9</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction unaryc(functionName) {\n    return (param, callbackFunktion) => {\n        callbackFunktion(functionName(param))\n    }\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h3>Make a function that takes a binary function, and returns a function that takes two arguments and a callback. <br>\n\t\t\t\t<span class=\"highlighted\">addc = binaryc(add); addc(4, 5, store) // variable === 9 <br>\n\t\t\t\tmulc = binaryc(mul); mulc(2, 3, store) // variable === 6</span></h3>\n\t\t\t<pre>\n\t\t\t\t<code>\nfunction binaryc(functionName) {\n    return (x, y, callback) => {\n        callback(functionName(x, y));\n    }\n}</code>\n\t\t\t</pre>\n\t\t</div>\n\t</body>\n</html>\n",
            "type": "Javascript",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript"
        ]
      }
    ]
  },
  {
    "name": "Übung 4 - DOM",
    "learningObjectives": [
      "Browser-Architektur erklären können.",
      "Grundlegenden Ablauf des Renderings erklären können.",
      "Document Object Model (DOM)-Konzepte erklären können.",
      "In JavaScript DOM-Abfragen programmieren können.",
      "In JavaScript DOM-Manipulationen programmieren können.",
      "Unterschiede zwischen innerHTML, innerText, textContent und outerHTML erklären können.",
      "Einen HTML-Editor programmieren können."
    ],
    "items": [
      {
        "heading": "Einkaufsliste",
        "name": "Übung 4.1 - Einkaufsliste",
        "task": "Implementieren Sie die interaktive Anwendung \"Einkaufsliste\" selbstständig in JavaScript durch Nutzung der DOM API. Jeder Punkt auf der Einkaufsliste soll sich individuell löschen lassen. Suchen Sie eine möglichst kurze und elegante Lösung. Denken Sie außerdem über Usability nach: Welche User Interaktionen sollten ebenfalls erlaubt sein? Implementieren Sie dann auch diese.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Einkaufsliste</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t\t.shoppingListContainer {\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t\theight: 90%;\n\t\t\t}\n\t\t\t.shoppingListContainer h1 {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\t\t\t.shoppingListContainer .form {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.shoppingListContainer .form input {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.shoppingListContainer .form button {\n\t\t\t\tmargin-left: 3px;\n\t\t\t}\n\t\t\tul.shoppingList {\n\t\t\t\tpadding-left: 28px;\n\t\t\t}\n\t\t\tul.shoppingList li {\n\t\t\t\tmargin: 5px 0;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.shoppingListContainer .form {\n\t\t\t\t\theight: 30px;\n\t\t\t\t}\n\t\t\t\t.shoppingListContainer .form input {\n\t\t\t\t\twidth: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"shoppingListContainer\">\n\t\t\t<h1>Einkaufsliste</h1>\n\t\t\t<div class=\"newItemHandler\">\n\t\t\t\t<p>\n\t\t\t\t\tEnter a new item:\n\t\t\t\t</p>\n\t\t\t\t<div class=\"form\">\n\t\t\t\t\t<input type=\"text\" class=\"itemName\" value=\"\" />\n\t\t\t\t\t<button class=\"addItem\">Add item</button>\n\t\t\t\t\t<button class=\"clearList\">Clear list</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ul class=\"shoppingList\">\n\n\t\t\t</ul>\n\t\t</div>\n\t\t<script>\n\t\t\tlet shoppingList;\n\t\t\tfunction addItem() {\n\t\t\t\tconst inputField = document.querySelector('input.itemName');\n\t\t\t\tconst itemName = inputField.value;\n\t\t\t\tconst newItem = generateNewItem(itemName);\n\n\t\t\t\tshoppingList.appendChild(newItem);\n\n\t\t\t\t// add delete funcionality to each item in list\n\t\t\t\tconst deleteButtons = shoppingList.querySelectorAll('button');\n\t\t\t\tlet counter = 0;\n\t\t\t\tfor (button of deleteButtons) {\n\t\t\t\t\tbutton.addEventListener('click', deleteItem);\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction deleteItem() {\n\t\t\t\tconst item = this.parentNode;\n\t\t\t\tshoppingList.removeChild(item);\n\t\t\t}\n\n\t\t\tfunction generateNewItem(itemName) {\n\t\t\t\tconst newItem = document.createElement('li');\n\t\t\t\tconst contentItem = document.createTextNode(itemName + ' ');\n\t\t\t\tconst button = document.createElement('button');\n\t\t\t\tconst contentButton = document.createTextNode('Delete');\n\n\t\t\t\tnewItem.appendChild(contentItem);\n\t\t\t\tbutton.appendChild(contentButton);\n\t\t\t\tnewItem.appendChild(button);\n\n\t\t\t\treturn newItem;\n\t\t\t}\n\n\t\t\tfunction clearList() {\n\t\t\t\tshoppingList.innerHTML = \"\";\n\t\t\t}\n\n\t\t\tfunction init() {\n\t\t\t\tconst inputField = document.querySelector('input.itemName');\n\t\t\t\tconst buttonAddItem = document.querySelector('button.addItem');\n\t\t\t\tconst buttonClearList = document.querySelector('button.clearList');\n\t\t\t\tshoppingList = document.querySelector('ul.shoppingList');\n\n\t\t\t\tinputField.addEventListener('keyup', function(event) {\n\t\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t\taddItem();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbuttonAddItem.addEventListener('click', addItem);\n\t\t\t\tbuttonClearList.addEventListener('click', clearList);\n\t\t\t}\n\n\t\t\tinit();\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
          "https://wiki.selfhtml.org/wiki/JavaScript/DOM",
          "https://www.w3schools.com/js/js_htmldom.asp"
        ]
      },
      {
        "heading": "Rednerliste",
        "name": "Übung 4.2 - Rednerliste",
        "task": "Implementieren Sie die interaktive Anwendung \"Rednerliste mit Zeitmessung\" selbstständig in JavaScript durch Nutzung der DOM API und der Timer-Funktionen. Neue Redner sollen auf Knopfdruck hinzugefügt werden können. Deren Uhr wird dann sofort automatisch gestartet und alle anderen Uhren angehalten. Bei jedem Redner soll die individuelle, gemessene Redezeit sekundengenau angezeigt werden. Für jeden Redner soll es einen eigenen Start-/Stopp-Button geben. Es soll immer nur eine Uhr laufen. Angezeigt werden sollen die bisherigen Summenzeiten aller Redebeiträge der betreffenden Person. Suchen Sie eine möglichst kurze und elegante Lösung. Achten Sie gleichzeitig auf gute Usability: z.B. wenn die Eingabe mit einem Return beendet wird, soll der Button-Click nicht mehr erforderlich sein, usw.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Rednerliste</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t\tbutton {\n\t\t\t\tmin-height: 30px;\n\t\t\t}\n\t\t\t.speakerContainer {\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t\theight: 90%;\n\t\t\t}\n\t\t\t.speakerContainer h1 {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\t\t\t.speakerContainer .form {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.speakerContainer .form input {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.speakerContainer .form button {\n\t\t\t\tmargin-left: 3px;\n\t\t\t}\n\t\t\tul.speakers {\n\t\t\t\tpadding-left: 28px;\n\t\t\t}\n\t\t\tul.speakers li {\n\t\t\t\tmargin: 5px 0;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.speakerContainer .form {\n\t\t\t\t\theight: 30px;\n\t\t\t\t}\n\t\t\t\t.speakerContainer .form input {\n\t\t\t\t\twidth: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"speakerContainer\">\n\t\t\t<h1>Rednerliste</h1>\n\t\t\t<div class=\"newSpeakerHandler\">\n\t\t\t\t<p>\n\t\t\t\t\tNeuer Redner:\n\t\t\t\t</p>\n\t\t\t\t<div class=\"form\">\n\t\t\t\t\t<input type=\"text\" class=\"speakerName\" value=\"\" />\n\t\t\t\t\t<button class=\"addSpeaker\">Hinzufügen</button>\n\t\t\t\t\t<button class=\"clearList\">Liste leeren</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<ul class=\"speakers\">\n\n\t\t\t</ul>\n\t\t</div>\n\t\t<script>\n\t\t\tlet speakers;\n\t\t\tfunction addSpeaker() {\n\t\t\t\tconst inputField = document.querySelector('input.speakerName');\n\t\t\t\tconst speakerName = inputField.value;\n\t\t\t\tconst newSpeaker = generateNewSpeaker(speakerName);\n\t\t\t\tspeakers.appendChild(newSpeaker);\n\t\t\t\tstartTimer(newSpeaker);\n\t\t\t}\n\n\t\t\tfunction generateNewSpeaker(speakerName) {\n\t\t\t\tconst newSpeaker = document.createElement('li');\n\t\t\t\tconst contentSpeaker = document.createTextNode(speakerName + ' ');\n\t\t\t\tconst timer = document.createElement('span');\n\t\t\t\tconst contentTimer = document.createTextNode('00:00:00 ');\n\t\t\t\tconst button = document.createElement('button');\n\t\t\t\tconst contentButton = document.createTextNode('Stop!');\n\t\t\t\tnewSpeaker.appendChild(contentSpeaker);\n\t\t\t\tnewSpeaker.dataset.time = 0.0;\n\t\t\t\tbutton.appendChild(contentButton);\n\t\t\t\tbutton.dataset.running = \"1\";\n\t\t\t\tbutton.addEventListener('click', execTimerAction);\n\t\t\t\ttimer.appendChild(contentTimer);\n\t\t\t\tnewSpeaker.appendChild(timer);\n\t\t\t\tnewSpeaker.appendChild(button);\n\t\t\t\treturn newSpeaker;\n\t\t\t}\n\n\t\t\tfunction startTimer(newSpeaker) {\n\t\t\t\tlet currentTime = newSpeaker.dataset.time;\n\t\t\t\tlet running = newSpeaker.querySelector('button').dataset.running;\n\n\t\t\t\tfor (const speaker of speakers.querySelectorAll('li')) {\n\t\t\t\t\tspeaker.querySelector('button').dataset.running = \"0\";\n\t\t\t\t\tspeaker.querySelector('button').innerHTML = 'Start!';\n\t\t\t\t}\n\t\t\t\tnewSpeaker.querySelector('button').dataset.running = \"1\";\n\t\t\t\tnewSpeaker.querySelector('button').innerHTML = 'Stop!';\n\n\t\t\t\tconst interval = setInterval(function() {\n\t\t\t\t\tcurrentTime++;\n\t\t\t\t\tnewSpeaker.dataset.time = currentTime;\n\t\t\t\t\tconst timeOutput = newSpeaker.querySelector('span');\n\t\t\t\t\ttimeOutput.innerHTML = getTimerOutput(currentTime);\n\t\t\t\t\trunning = newSpeaker.querySelector('button').dataset.running;\n\t\t\t\t\tif(running == \"0\") {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t}\n\n\t\t\tfunction execTimerAction() {\n\t\t\t\tconst speaker = this.parentElement;\n\t\t\t\tif (this.dataset.running == \"1\") {\n\t\t\t\t\tthis.dataset.running = \"0\";\n\t\t\t\t\tthis.innerHTML = 'Start!';\n\t\t\t\t} else {\n\t\t\t\t\tthis.dataset.running = \"1\";\n\t\t\t\t\tthis.innerHTML = 'Stop!';\n\t\t\t\t\tstartTimer(speaker);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getTimerOutput(seconds) {\n\t\t\t\tconst minutes = Math.floor(seconds / 60);\n\t\t\t\tconst hours = Math.floor(minutes / 60);\n\t\t\t\tseconds = seconds - minutes * 60;\n\t\t\t\treturn `${hours < 10 ? '0' : ''}${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds} `;\n\t\t\t}\n\n\t\t\tfunction clearList() {\n\t\t\t\tspeakers.innerHTML = \"\";\n\t\t\t}\n\n\t\t\tfunction init() {\n\t\t\t\tconst inputField = document.querySelector('input.speakerName');\n\t\t\t\tconst buttonAddSpeaker = document.querySelector('button.addSpeaker');\n\t\t\t\tconst buttonClearList = document.querySelector('button.clearList');\n\t\t\t\tspeakers = document.querySelector('ul.speakers');\n\n\t\t\t\tinputField.addEventListener('keyup', function(event) {\n\t\t\t\t\tif (event.keyCode === 13) {\n\t\t\t\t\t\taddSpeaker();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbuttonAddSpeaker.addEventListener('click', addSpeaker);\n\t\t\t\tbuttonClearList.addEventListener('click', clearList);\n\t\t\t}\n\n\t\t\tinit();\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
          "https://wiki.selfhtml.org/wiki/JavaScript/DOM",
          "https://www.w3schools.com/js/js_htmldom.asp",
          "https://www.w3schools.com/js/js_timing.asp"
        ]
      },
      {
        "heading": "Tabellenkalkulation",
        "name": "Übung 4.3 - Tabellenkalkulation",
        "task": "Schreiben Sie eine Tabellenkalkulation mit den Bordmitteln des Webs. In die Tabelle soll man Zahlen und Formeln eintragen können. Die Formeln sollen berechnet werden, sobald sie fertig eingegeben sind, aber auch immer wieder editiert werden können. Beginnen Sie mit einfachen Summenformeln wie =SUM(A2:D2).",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Tabellenkalkulation mit contentEditable</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t\ttable {\n\t\t\t\tborder-collapse: collapse;\n\t\t\t}\n\t\t\ttd {\n\t\t\t\tborder: 1px solid #000;\n\t\t\t\twidth: 200px;\n\t\t\t\theight: 25px;\n\t\t\t\ttext-align: right;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>Tabellen&shy;kalkulation mit content&shy;Editable</h1>\n\t\t<div class=\"spreadsheet\">\n\t\t\t<table>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t\t<td contenteditable></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>\n\t\t<script>\n\t\t\tlet tableCells;\n\t\t\tconst alphabetMapping = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\n\n\t\t\t// calculate the result of the entered formular by extracting the two table cell identifiers\n\t\t\t// and apply the type of calculation on them\n\t\t\tfunction calculateResult(focusEvent, formular = null) {\n\t\t\t\tlet formulaEntered = false;\n\t\t\t\tlet typeOfCalc = \"\";\n\t\t\t\tlet calcResult = \"\";\n\n\t\t\t\tif (!formular) {\n\t\t\t\t\tformular = this.textContent;\n\t\t\t\t}\n\t\t\t\tif (formular.indexOf(\"=SUM\") >= 0) {\n\t\t\t\t\tformulaEntered = true;\n\t\t\t\t\ttypeOfCalc = \"sum\";\n\t\t\t\t}\n\t\t\t\tif (formular.indexOf(\"=SUB\") >= 0) {\n\t\t\t\t\tformulaEntered = true;\n\t\t\t\t\ttypeOfCalc = \"subtract\";\n\t\t\t\t}\n\t\t\t\tif (formular.indexOf(\"=MUL\") >= 0) {\n\t\t\t\t\tformulaEntered = true;\n\t\t\t\t\ttypeOfCalc = \"multiply\";\n\t\t\t\t}\n\t\t\t\tif (formular.indexOf(\"=DIV\") >= 0) {\n\t\t\t\t\tformulaEntered = true;\n\t\t\t\t\ttypeOfCalc = \"divide\";\n\t\t\t\t}\n\t\t\t\tif (formulaEntered) {\n\t\t\t\t\tif (focusEvent) {\n\t\t\t\t\t\tthis.dataset.calculation = formular;\n\t\t\t\t\t}\n\t\t\t\t\tconst param1 = formular.substring(\n\t\t\t\t\t\tformular.indexOf(\"(\") + 1,\n\t\t\t\t\t\tformular.lastIndexOf(\":\")\n\t\t\t\t\t);\n\t\t\t\t\tconst param2 = formular.substring(\n\t\t\t\t\t\tformular.indexOf(\":\") + 1,\n\t\t\t\t\t\tformular.lastIndexOf(\")\")\n\t\t\t\t\t);\n\t\t\t\t\tconst cell1 = getColumn(param1);\n\t\t\t\t\tconst cell2 = getColumn(param2);\n\t\t\t\t\tswitch (typeOfCalc) {\n\t\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\t\tcalcResult = sum(parseInt(cell1.textContent), parseInt(cell2.textContent));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"subtract\":\n\t\t\t\t\t\t\tcalcResult = subtract(parseInt(cell1.textContent), parseInt(cell2.textContent));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"multiply\":\n\t\t\t\t\t\t\tcalcResult = multiply(parseInt(cell1.textContent), parseInt(cell2.textContent));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"divide\":\n\t\t\t\t\t\t\tcalcResult = divide(parseInt(cell1.textContent), parseInt(cell2.textContent));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (focusEvent) {\n\t\t\t\t\t\tthis.textContent = calcResult;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn calcResult;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcheckForCalcUpdates(this);\n\t\t\t}\n\n\t\t\t// get table cell by its identifier\n\t\t\tfunction getColumn(identifier) {\n\t\t\t\tconst row = parseInt(identifier.substring(0, 1), 36) - 10;\n\t\t\t\tconst column = identifier.substring(1) - 1;\n\t\t\t\tconst tableRow = document.querySelectorAll('table tr').item(row);\n\t\t\t\tconst tableCell = tableRow.querySelectorAll('td').item(column);\n\t\t\t\treturn tableCell;\n\t\t\t}\n\n\t\t\tfunction sum(x, y) {\n\t\t\t\treturn x + y;\n\t\t\t}\n\t\t\tfunction subtract(x, y) {\n\t\t\t\treturn x - y;\n\t\t\t}\n\t\t\tfunction multiply(x, y) {\n\t\t\t\treturn x * y;\n\t\t\t}\n\t\t\tfunction divide(x, y) {\n\t\t\t\treturn x / y;\n\t\t\t}\n\n\t\t\t// update table cells, where a used identifier was changed\n\t\t\tfunction checkForCalcUpdates(tableCell) {\n\t\t\t\tconst tableRow = tableCell.parentNode;\n\t\t\t\tconst table = tableRow.parentNode;\n\t\t\t\tconst rowIdentifier = Array.prototype.indexOf.call(table.children, tableRow);\n\t\t\t\tconst rowNumber = alphabetMapping[rowIdentifier];\n\t\t\t\tconst columnIdentifier = Array.prototype.indexOf.call(tableRow.children, tableCell) + 1;\n\t\t\t\tconst tableCellIdentifier = \"\" + rowNumber + columnIdentifier;\n\n\t\t\t\tfor (const tableCell of tableCells) {\n\t\t\t\t\tconst formular = tableCell.dataset.calculation;\n\t\t\t\t\tif (formular) {\n\t\t\t\t\t\tconst param1 = formular.substring(\n\t\t\t\t\t\t\tformular.indexOf(\"(\") + 1,\n\t\t\t\t\t\t\tformular.lastIndexOf(\":\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst param2 = formular.substring(\n\t\t\t\t\t\t\tformular.indexOf(\":\") + 1,\n\t\t\t\t\t\t\tformular.lastIndexOf(\")\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (param1 == tableCellIdentifier || param2 == tableCellIdentifier) {\n\t\t\t\t\t\t\ttableCell.textContent = calculateResult(null, formular);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction init() {\n\t\t\t\ttableCells = document.querySelectorAll('.spreadsheet table td');\n\t\t\t\tfor (const tableCell of tableCells) {\n\t\t\t\t\ttableCell.addEventListener('focus', function() {\n\t\t\t\t\t\tif (this.dataset.calculation) {\n\t\t\t\t\t\t\tthis.textContent = this.dataset.calculation;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\ttableCell.addEventListener('blur', calculateResult);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinit();\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
          "https://wiki.selfhtml.org/wiki/JavaScript/DOM",
          "https://www.w3schools.com/js/js_htmldom.asp"
        ]
      },
      {
        "heading": "HTML-Editor",
        "name": "Übung 4.4 - HTML-Editor",
        "task": "Arbeiten Sie das Tutorial Create a WYSIWYG Editor With the contentEditable Attribute durch und erstellen Sie Ihren eigenen HTML-Editor.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>HTML-Editor</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t  margin: 0 auto;\n\t\t\t  font-family: 'Arial';\n\t\t\t  background: #fff;\n\t\t\t}\n\t\t\t.icon {\n\t\t\t\twidth: 24px;\n\t\t\t\theight: 24px;\n\t\t\t}\n\t\t\t.fore-palette,\n\t\t\t.back-palette {\n\t\t\t  display: none;\n\t\t\t}\n\t\t\t.htmlEditor {\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t\tmargin: 0 10px;\n\t\t\t}\n\t\t\t.commandGroup {\n\t\t\t\tmargin-right: 10px;\n\t\t\t}\n\t\t\t.fore-wrapper:hover .fore-palette,\n\t\t\t.back-wrapper:hover .back-palette {\n\t\t\t  display: block;\n\t\t\t  float: left;\n\t\t\t  position: absolute;\n\t\t\t}\n\t\t\t.toolbar a,\n\t\t\t.fore-wrapper,\n\t\t\t.back-wrapper {\n\t\t\t  border: 1px solid #AAA;\n\t\t\t  background: #FFF;\n\t\t\t  font-family: 'Arial black';\n\t\t\t  border-radius: 1px;\n\t\t\t  color: black;\n\t\t\t  padding: 5px;\n\t\t\t  width: 1.5em;\n\t\t\t  margin: -2px;\n\t\t\t  margin-top: 10px;\n\t\t\t  display: inline-block;\n\t\t\t  text-decoration: none;\n\t\t\t  box-shadow: 0px 1px 0px #CCC;\n\t\t\t}\n\t\t\t.toolbar a:hover,\n\t\t\t.fore-wrapper:hover,\n\t\t\t.back-wrapper:hover {\n\t\t\t  background: #f2f2f2;\n\t\t\t  border-color: #8c8c8c;\n\t\t\t}\n\t\t\t#editor {\n\t\t\t  box-shadow: 0 0 2px #CCC;\n\t\t\t  min-height: 150px;\n\t\t\t  overflow: auto;\n\t\t\t  padding: 1em;\n\t\t\t  margin-top: 20px;\n\t\t\t  resize: vertical;\n\t\t\t  outline: none;\n\t\t\t  background: #fff;\n\t\t\t}\n\t\t\t.toolbar a.small-icon {\n\t\t\t\tpadding-top: 12px;\n\t\t\t\ttext-align: center;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\tbody {\n\t\t\t\t\twidth: 600px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>HTML-Editor</h1>\n\t\t<div class=\"htmlEditor\">\n\t\t\t<div class=\"toolbar\">\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='undo'><img class=\"icon\" src=\"img/icons/wysiwyg/undo.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='redo'><img class=\"icon\" src=\"img/icons/wysiwyg/redo.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='justifyLeft'><img class=\"icon\" src=\"img/icons/wysiwyg/align-left.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='justifyCenter'><img class=\"icon\" src=\"img/icons/wysiwyg/align-center.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='justifyRight'><img class=\"icon\" src=\"img/icons/wysiwyg/align-right.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='justifyFull'><img class=\"icon\" src=\"img/icons/wysiwyg/align-justify.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='createLink'><img class=\"icon\" src=\"img/icons/wysiwyg/link.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='unlink'><img class=\"icon\" src=\"img/icons/wysiwyg/unlink.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='insertImage'><img class=\"icon\" src=\"img/icons/wysiwyg/image.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a class=\"small-icon\" href=\"#\" data-command='h1'>H1</a>\n\t\t\t\t\t<a class=\"small-icon\" href=\"#\" data-command='h2'>H2</a>\n\t\t\t\t\t<a class=\"small-icon\" href=\"#\" data-command='h3'>H3</a>\n\t\t\t\t\t<a href=\"#\" data-command='p'><img class=\"icon\" src=\"img/icons/wysiwyg/paragraph.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='pre'><img class=\"icon\" src=\"img/icons/wysiwyg/code.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='superscript'><img class=\"icon\" src=\"img/icons/wysiwyg/superscript.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='subscript'><img class=\"icon\" src=\"img/icons/wysiwyg/subscript.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='bold'><img class=\"icon\" src=\"img/icons/wysiwyg/bold.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='italic'><img class=\"icon\" src=\"img/icons/wysiwyg/italic.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='underline'><img class=\"icon\" src=\"img/icons/wysiwyg/underline.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='strikeThrough'><img class=\"icon\" src=\"img/icons/wysiwyg/strikethrough.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<a href=\"#\" data-command='insertUnorderedList'><img class=\"icon\" src=\"img/icons/wysiwyg/list-ul.svg\" /></a>\n\t\t\t\t\t<a href=\"#\" data-command='insertOrderedList'><img class=\"icon\" src=\"img/icons/wysiwyg/list-ol.svg\" /></a>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"commandGroup\">\n\t\t\t\t\t<div class=\"fore-wrapper\">\n\t\t\t\t\t\t<img class=\"icon\" src=\"img/icons/wysiwyg/fontColored.svg\" />\n\t\t\t\t\t\t<div class=\"fore-palette\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"back-wrapper\">\n\t\t\t\t\t\t<img class=\"icon\" src=\"img/icons/wysiwyg/font.svg\" style=\"background: orange;\"/>\n\t\t\t\t\t\t<div class=\"back-palette\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div id='editor' contenteditable>\n\t\t\t  <h1>A WYSIWYG Editor.</h1>\n\t\t\t  <p>Try making some changes here. Add your own text or maybe an image.</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tlet colorPalette;\n\t\t\tfunction init() {\n\t\t\t\tcolorPalette = ['000000', 'FF9966', '6699FF', '99FF66','CC0000', '00CC00', '0000CC', '333333', '0066FF', 'FFFFFF'];\n\n\t\t\t\tconst forePalette = document.querySelector('.fore-palette');\n\t\t\t\tconst backPalette = document.querySelector('.back-palette');\n\n\t\t\t\tfor (let i = 0; i < colorPalette.length; i++) {\n\t\t\t\t\tconst forecolorCommand = document.createElement('a');\n\t\t\t\t\tconst commandElementForecolor = setColorpalette(forecolorCommand, 'forecolor', i);\n\t\t\t\t\tforePalette.appendChild(commandElementForecolor);\n\n\t\t\t\t\tconst backcolorCommand = document.createElement('a');\n\t\t\t\t\tconst commandElementBackcolor = setColorpalette(backcolorCommand, 'backcolor', i);\n\t\t\t\t\tbackPalette.appendChild(commandElementBackcolor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setColorpalette(commandElement, commandName, i) {\n\t\t\t\tcommandElement.setAttribute('href', '#');\n\t\t\t\tcommandElement.setAttribute('class', 'palette-item');\n\t\t\t\tcommandElement.dataset['command'] = commandName;\n\t\t\t\tcommandElement.dataset['value'] = '#' + colorPalette[i];\n\t\t\t\tcommandElement.style.backgroundColor = '#' + colorPalette[i];\n\t\t\t\treturn commandElement;\n\t\t\t}\n\n\t\t\tfunction handleToolbarCommands() {\n\t\t\t\tconst toolbarCommands = document.querySelectorAll('.toolbar a');\n\t\t\t\tfor(const toolbarCommand of toolbarCommands) {\n\t\t\t\t\ttoolbarCommand.addEventListener('click', function (e) {\n\t\t\t\t\t\tconst command = this.dataset.command;\n\t\t\t\t\t\tconst value = this.dataset.value;\n\t\t\t\t\t\tif (command == 'h1' || command == 'h2' || command == 'h3' || command == 'p' || command == 'pre') {\n\t\t\t\t\t\t\tdocument.execCommand('formatBlock', false, command);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command == 'forecolor' || command == 'backcolor') {\n\t\t\t\t\t\t\tdocument.execCommand(command, false, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command == 'createLink' || command == 'insertImage') {\n\t\t\t\t\t\t\turl = prompt('Enter the link here: ','http:\\/\\/');\n\t\t\t\t\t\t\tdocument.execCommand(command, false, url);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse document.execCommand(command, false, null);\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tinit();\n\t\t\thandleToolbarCommands();\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
          "https://wiki.selfhtml.org/wiki/JavaScript/DOM",
          "https://www.w3schools.com/js/js_htmldom.asp",
          "https://code.tutsplus.com/tutorials/create-a-wysiwyg-editor-with-the-contenteditable-attribute--cms-25657"
        ]
      }
    ]
  },
  {
    "name": "Übung 5 - Asynchron",
    "learningObjectives": [
      "Die Metamorphose des WWW erklären können.",
      "Kategorienfehler des WWW erklären können.",
      "Event Loop des Browsers erklären können.",
      "Mit Ajax programmieren können.",
      "Mit Promise programmieren können.",
      "Mit async / await programmieren können.",
      "Mit Events programmieren können.",
      "Nebenläufige Worker programmieren können."
    ],
    "items": [
      {
        "heading": "Promises",
        "name": "Übung 5.1 - Promises",
        "task": "Erstellen Sie auf Ihrem Server www2.inf.h-brs.de (oder localhost) zwei Text-Dateien A.txt und B.txt mit ungefähr gleich vielen Zeilen. Laden Sie mit der fetch-API parallel beide Text-Dateien vom Server. Geben Sie auf einer Webseite den Inhalt beider Dateien zeilenweise aus, wobei der Anfang der Zeile aus A.txt und das Ende aus B.txt stammen soll. Die beiden Dateien sollen also zeilenweise konkateniert werden. Erzielen Sie max. Geschwindigkeit durch maximale Parallelität. Achten Sie gleichzeitig auf Korrektheit. Verwenden Sie dabei ausschließlich die Promise API ohne async / await.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Promises</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\tspan.left {\n\t\t\t\tcolor: red;\n\t\t\t}\n\t\t\tspan.right {\n\t\t\t\tcolor: green;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>Promises</h1>\n\t\t<div class=\"promisesOutput\">\n\t\t\t\n\t\t</div>\n\t\t<script>\n\t\t\tfunction getPromiseOutput(promiseOutput) {\n\t\t\t\tPromise.all([\n\t\t\t\t\tfetch('data/A.txt'),\n\t\t\t\t\tfetch('data/B.txt')\n\t\t\t\t]).then(responses => {\n\t\t\t\t\tif (responses.filter(response => response.status === 'rejected').length > 0) {\n\t\t\t\t\t\treturn Promise.reject('Laden der Daten fehlgeschlagen');\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(responses.map(response => response.text()))\n\t\t\t\t}).then(texts => {\n\t\t\t\t\tconst textLines = texts.map(t => t.split(/\\r\\n|\\n|\\r/gm));\n\t\t\t\t\tconst maxLines = textLines[0].length > textLines[1].length ? textLines[0].length : textLines[1].length;\n\t\t\t\t\toutput = '';\n\t\t\t\t\tfor (let i = 0; i < maxLines; i++) {\n\t\t\t\t\t\toutput += `<span class=\"left\">${textLines[0][i] || ''}</span> <span class=\"right\">${textLines[1][i] || ''}</span><br>`;\n\t\t\t\t\t}\n\t\t\t\t\tpromiseOutput.innerHTML = output;\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}).catch(error => console.error(error));\n\t\t\t}\n\n\t\t\tfunction init() {\n\t\t\t\tconst promiseOutput = document.querySelector('.promisesOutput');\n\t\t\t\tgetPromiseOutput(promiseOutput);\n\t\t\t}\n\n\t\t\tinit()\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise",
          "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
        ]
      },
      {
        "heading": "async / await",
        "name": "Übung 5.2 - async / await",
        "task": "Lösen Sie die letzte Aufgabe mit async / await statt Promise.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Promises</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body {\n            background: #fff;\n        }\n        span.left {\n            color: red;\n        }\n        span.right {\n            color: green;\n        }\n    </style>\n</head>\n<body>\n<h1>Promises</h1>\n<div class=\"promisesOutput\">\n\n</div>\n<script>\n    async function getPromiseOutput(promiseOutput) {\n        try {\n            const texts = [\n                await (await fetch('data/A.txt')).text(),\n                await (await fetch('data/B.txt')).text()\n            ];\n            const textLines = texts.map(t => t.split(/\\r\\n|\\n|\\r/gm));\n            const maxLines = textLines[0].length > textLines[1].length ? textLines[0].length : textLines[1].length;\n            output = '';\n            for (let i = 0; i < maxLines; i++) {\n                output += `<span class=\"left\">${textLines[0][i] || ''}</span> <span class=\"right\">${textLines[1][i] || ''}</span><br>`;\n            }\n            promiseOutput.innerHTML = output;\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    function init() {\n        const promiseOutput = document.querySelector('.promisesOutput');\n        getPromiseOutput(promiseOutput);\n    }\n\n    init()\n</script>\n</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
          "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/async_function"
        ]
      },
      {
        "heading": "Web Worker",
        "name": "Übung 5.3 - Web Worker",
        "task": "Schreiben Sie eine Webseite, die Primzahlen berechnet und fortlaufend neu berechnete Primzahlen hinzufügt. Verwenden Sie dabei die BigNum-Arithmetik. Auf der Webseite soll außerdem ein Ladebalken ständig hin- und herlaufen, damit man feststellen kann, ob die Anzeige ruckelfrei abläuft. Stellen Sie fest, ab welcher Zahl der Ladebalken anfängt zu ruckeln.\n\nSchreiben Sie dann einen Web Worker, der Primzahlen berechnet und diese mittels postMessage an die EventLoop in der Webseite sendet, damit diese dort angezeigt werden können.",
        "content": [
          {
            "headline": "Webseite zur Berechnung der Primzahlen",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Webseite zur Berechnung von Primzahlen</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tbackground: #fff;\n\t\t\tfont-family: Arial, Verdana;\n\t\t}\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.output {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t.additionalContent {\n\t\t\tpadding: 20px 0;\n\t\t}\n\t\t.loadingBar {\n\t\t\twidth: 200px;\n\t\t\tborder: 1px solid #000;\n\t\t\theight: 15px;\n\t\t\tposition: relative;\n\t\t\tbackground: #fff;\n\t\t}\n\t\t.loadingBar .bar {\n\t\t\tbackground: green;\n\t\t\twidth: 20px;\n\t\t\theight: 15px;\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t}\n\t\t.primzahlen {\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t\twidth: 100%;\n\t\t\tbox-sizing: border-box;\n\t\t}\n\t\t.primzahlen h2 {\n\t\t\tmargin-top: 0;\n\t\t}\n\t\t.primzahlen ul {\n\t\t\tborder: 1px solid #000;\n\t\t\theight: 300px;\n\t\t\toverflow-y: auto;\n\t\t\tbackground: #fff;\n\t\t}\n\t\t@media (min-width: 600px) {\n\t\t\t.output {\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t\t.primzahlen {\n\t\t\t\twidth: fit-content;\n\t\t\t}\n\t\t\t.primzahlen ul {\n\t\t\t\twidth: 200px;\n\t\t\t}\n\t\t\t.additionalContent {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>Webseite zur Berechnung von Primzahlen</h1>\n<div class=\"primzahlen\">\n\t<h2>Primzahlen</h2>\n\t<button class=\"startCalc\">Start</button>\n\t<button class=\"stopCalc hidden\">Stop</button>\n\t<div class=\"output\">\n\t\t<ul></ul>\n\t\t<div class=\"additionalContent\">\n\t\t\t<div class=\"loadingBar\">\n\t\t\t\t<div class=\"bar\"></div>\n\t\t\t</div>\n\t\t\t<p>Gesamtdauer: <span>0</span> Sekunden</p>\n\t\t</div>\n\t</div>\n</div>\n<script>\n\tlet currentNumber, primeOutput, timeOutput, interval, time, animation, numberPrimes, buttonStart, buttonStop, loadingBar, calcStarted;\n\tinit();\n\n\tfunction init() {\n\t\tbuttonStart = document.querySelector('button.startCalc');\n\t\tbuttonStop = document.querySelector('button.stopCalc');\n\t\tloadingBar = document.querySelector('.loadingBar .bar');\n\t\tcalcStarted = false;\n\t}\n\n\tbuttonStart.addEventListener('click', function(e) {\n\t\tstartCalculation();\n\t\tcalcStarted = true;\n\t\tbuttonStop.classList.remove('hidden');\n\t});\n\tbuttonStop.addEventListener('click', function(e) {\n\t\tclearInterval(interval);\n\t\tanimation.pause();\n\t\tcalcStarted = false;\n\t});\n\n\tfunction startAnimation() {\n\t\tanimation = loadingBar.animate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tleft: '0'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tleft: '180px'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tleft: '0'\n\t\t\t\t}\n\t\t\t], {\n\t\t\t\tduration: 2000,\n\t\t\t\titerations: Infinity,\n\t\t\t});\n\t}\n\n\t/* https://stackoverflow.com/questions/40200089/number-prime-test-in-javascript */\n\tfunction isPrime(num) {\n\t\tfor (let i = 2n; i * i <= num; i++)\n\t\t\tif (num % i === 0n)\n\t\t\t\treturn false;\n\t\treturn num > 1;\n\t}\n\n\tfunction getNextPrime() {\n\t\tif (isPrime(currentNumber)) {\n\t\t\tconst newPrime = document.createElement('li');\n\t\t\tnewPrime.innerText = currentNumber;\n\t\t\tprimeOutput.appendChild(newPrime);\n\t\t\tconst duration = new Date() - time;\n\t\t\ttimeOutput.innerText = duration / 1000;\n\t\t\tnumberPrimes++;\n\t\t}\n\t\tif (numberPrimes == 25) {\n\t\t\tclearInterval(interval);\n\t\t\tanimation.pause();\n\t\t}\n\t\tcurrentNumber++;\n\t}\n\n\tfunction startCalculation() {\n\t\tcurrentNumber = 999999999999n;\n\t\ttime = new Date();\n\t\tprimeOutput = document.querySelector('.primzahlen ul');\n\t\ttimeOutput = document.querySelector('.primzahlen p span');\n\t\tnumberPrimes = 0;\n\t\tinterval = setInterval(getNextPrime, 100);\n\t\tstartAnimation();\n\t}\n</script>\n</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          },
          {
            "headline": "JavaScript-Code für den WebWorker",
            "code": "self.addEventListener('message', function(e) {\n\tif (e.data === 'start') {\n\t\tdoWork();\n\t}\n\tif (e.data === 'stop') {\n\t\tclearInterval(interval);\n\t\tpostMessage(['stop']);\n\t}\n});\n\n\nlet currentNumber, interval, time, numberPrimes;\n\n/* https://stackoverflow.com/questions/40200089/number-prime-test-in-javascript */\nfunction isPrime(num) {\n\tfor (let i = 2n; i * i <= num; i++)\n\t\tif (num % i === 0n)\n\t\t\treturn false;\n\treturn num > 1;\n}\n\nfunction getNextPrime() {\n\tif (isPrime(currentNumber)) {\n\t\tconst duration = new Date() - time;\n\t\tnumberPrimes++;\n\t\tpostMessage([currentNumber, duration]);\n\t}\n\tif (numberPrimes == 25) {\n\t\tclearInterval(interval);\n\t\tpostMessage(['stop']);\n\t}\n\tcurrentNumber++;\n}\n\nfunction doWork() {\n\tcurrentNumber = 999999999999n;\n\ttime = new Date();\n\tnumberPrimes = 0;\n\tinterval = setInterval(getNextPrime, 100);\n}\n",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "HTML-Code für die WebWorker-Lösung",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>WebWorker-Lösung</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tbackground: #fff;\n\t\t\tfont-family: Arial, Verdana;\n\t\t}\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.output {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t.additionalContent {\n\t\t\tpadding: 20px 0;\n\t\t}\n\t\t.loadingBar {\n\t\t\twidth: 200px;\n\t\t\tborder: 1px solid #000;\n\t\t\theight: 15px;\n\t\t\tposition: relative;\n\t\t\tbackground: #fff;\n\t\t}\n\t\t.loadingBar .bar {\n\t\t\tbackground: green;\n\t\t\twidth: 20px;\n\t\t\theight: 15px;\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t}\n\t\t.primzahlen {\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t\twidth: 100%;\n\t\t\tbox-sizing: border-box;\n\t\t}\n\t\t.primzahlen h2 {\n\t\t\tmargin-top: 0;\n\t\t}\n\t\t.primzahlen ul {\n\t\t\tborder: 1px solid #000;\n\t\t\theight: 300px;\n\t\t\toverflow-y: auto;\n\t\t\tbackground: #fff;\n\t\t}\n\t\t@media (min-width: 600px) {\n\t\t\t.output {\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t\t.primzahlen {\n\t\t\t\twidth: fit-content;\n\t\t\t}\n\t\t\t.primzahlen ul {\n\t\t\t\twidth: 200px;\n\t\t\t}\n\t\t\t.additionalContent {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>WebWorker-Lösung</h1>\n<div class=\"primzahlen\">\n\t<h2>Berechnung von Primzahlen:</h2>\n\t<button class=\"startCalc\">Start</button>\n\t<button class=\"stopCalc hidden\">Stop</button>\n\t<div class=\"output\">\n\t\t<ul></ul>\n\t\t<div class=\"additionalContent\">\n\t\t\t<div class=\"loadingBar\">\n\t\t\t\t<div class=\"bar\"></div>\n\t\t\t</div>\n\t\t\t<p>Gesamtdauer: <span>0</span> Sekunden</p>\n\t\t</div>\n\t</div>\n</div>\n<script>\n\tlet worker, buttonStart, buttonStop, animation, calcStarted, loadingBar, primeOutput, timeOutput;\n\tinit();\n\n\tfunction init() {\n\t\tworker = new Worker('js/webworker5.3.js');\n\t\tbuttonStart = document.querySelector('button.startCalc');\n\t\tbuttonStop = document.querySelector('button.stopCalc');\n\t\tloadingBar = document.querySelector('.loadingBar .bar');\n\t\tprimeOutput = document.querySelector('.primzahlen ul');\n\t\ttimeOutput = document.querySelector('.primzahlen p span');\n\t\tcalcStarted = false;\n\t}\n\n\tfunction startAnimation() {\n\t\tanimation = loadingBar.animate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tleft: '0'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tleft: '180px'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tleft: '0'\n\t\t\t\t}\n\t\t\t], {\n\t\t\t\tduration: 2000,\n\t\t\t\titerations: Infinity,\n\t\t\t});\n\t}\n\n\tbuttonStart.addEventListener('click', function(e) {\n\t\tworker.postMessage('start');\n\t\tstartAnimation();\n\t\tcalcStarted = true;\n\t\tbuttonStop.classList.remove('hidden');\n\t});\n\n\tbuttonStop.addEventListener('click', function(e) {\n\t\tworker.postMessage('stop');\n\t\tcalcStarted = false;\n\t});\n\n\tworker.addEventListener('message', function(e) {\n\t\tif (e.data.length === 2) {\n\t\t\tconst newPrime = document.createElement('li');\n\t\t\tnewPrime.innerText = e.data[0];\n\t\t\tprimeOutput.appendChild(newPrime);\n\t\t\ttimeOutput.innerText = e.data[1] / 1000;\n\t\t}\n\n\t\tif (e.data[0] === 'stop') {\n\t\t\tconsole.log('stop');\n\t\t\tanimation.pause();\n\t\t}\n\t});\n\n\n</script>\n</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          },
          {
            "headline": "Messergebnisse",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Messergebnisse</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tfont-family: Arial, Verdana;\n\t\t\tbackground: #fff;\n\t\t\tcolor: #333;\n\t\t}\n\t\t.item {\n\t\t\tmargin-bottom: 30px;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t}\n\t\th2 {\n\t\t\tmargin: 0;\n\t\t}\n\t\tp {\n\t\t\tmargin: 15px 0 0;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.item {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>Messergebnisse</h1>\n<div class=\"item\">\n\t<h2>Messen Sie die Geschwindigkeit Ihrer beiden Lösungen und geben Sie hier Ihre Messergebnisse an:</h2>\n\t<p>\n\t\tDie <u>normale Webseite</u> hat für die Berechnung von <i>25</i> Primzahlen ungefähr <b>67,4</b> Sekunden gebraucht. <br>\n\t\tDie <u>WebWorker-Lösung</u> brauchte hierfür knapp <b>67,3</b> Sekunden. <br><br>\n\t\tBeide Lösungen waren also ungefähr gleich schnell. Auffällig war jedoch, dass der Ladebalken bei der\n\t\tnormalen Lösung jedes Mal gestockt hat, wenn eine neue Primzahl gefunden wurde.\n\t\tBei der WebWorker-Lösung lief der Ladebalken flüssig durch.\n\t</p>\n</div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"
        ]
      },
      {
        "heading": "WWW-Navigator",
        "name": "Übung 5.4",
        "task": "Schreiben Sie einen Navigator für die Fachbegriffe des WWW zu den Oberthemen HTML, CSS und JavaScript. Im Hauptmenü sollen diese 3 Oberthemen zur Auswahl stehen. Im Untermenü soll eine zugehörige Liste von Fachbegriffen zum jeweiligen ausgewählten Oberthema stehen. In der Mitte soll eine Dokumentation zum ausgewählten Fachbegriff erscheinen mit Hyperlinks zu den anderen Fachbegriffen. Wird auf einen solchen Hyperlink geklickt, so sollen sich auch die beiden Menüs anpassen. Mit dem Back-Button des Browsers soll ein Zurücksprung möglich sein.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Responsiv mit Flexbox Desktop-First</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tfont-weight: normal;\n\t\t\t\tmargin:  0;\n\t\t\t}\n\t\t\ta.button {\n\t\t\t\tbackground: #6A709F;\n\t\t\t\tcolor: black;\n\t\t\t\tborder-radius: 20px;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tpadding: 4px 30px;\n\t\t\t\tmargin: 5px;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-family: Arial;\n\t\t\t\tborder: 2px outset #F9FBFC;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\ta.button:hover, \n\t\t\ta.button.active {\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\t\t\t.gridContainer {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template: auto 1fr auto / auto 1fr auto;\n\t\t\t\tmargin: 10px;\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tcolor:  white;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\t.header {\n\t\t\t\tbackground: #c04f50;\n\t\t\t\tborder-radius: 10px 10px 0 0;\n\t\t\t\tpadding: 0 5px 15px;\n\t\t\t}\n\t\t\t.header .nav {\n\t\t\t\ttext-align: left;\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\t\t\t.header, .footer {\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.leftSide, .rightSide {\n\t\t\t\tpadding: 10px;\n\t\t\t\tbackground: #C28280;\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.leftSide .nav {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\t\t\t.leftSide .nav a {\n\t\t\t\tmargin: 5px;\n\t\t\t}\n\t\t\t.mainContent {\n\t\t\t\tbackground: #6D9FBF;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tpadding: 20px;\n\t\t\t\ttext-align: left;\n\t\t\t\tfont-family: Arial;\n\t\t\t\tgrid-column: 1 / 4;\n\t\t\t}\n\t\t\t.rightSide a {\n\t\t\t\tword-break: break-all;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t\tbackground: black;\n\t\t\t\tpadding-bottom: 15px;\n\t\t\t\tborder-radius: 0 0 10px 10px;\n\t\t\t}\n\t\t\t.footer a {\n\t\t\t\tcolor: white;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.gridContainer {\n\t\t\t\t\theight: 95%;\n\t\t\t\t}\n\t\t\t\t.header .nav,\n\t\t\t\t.leftSide .nav {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.leftSide, .rightSide {\n\t\t\t\t\tpadding: 10px 20px;\n\t\t\t\t\tmax-width: 6rem;\n\t\t\t\t}\n\t\t\t\t.leftSide .nav a {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tpadding: 4px 10px;\n\t\t\t\t}\n\t\t\t\t.leftSide {\n\t\t\t\t\tgrid-column: 1 / 1;\n\t\t\t\t}\n\t\t\t\t.mainContent {\n\t\t\t\t\tgrid-column: 2 / 2;\n\t\t\t\t}\n\t\t\t\t.rightSide {\n\t\t\t\t\tgrid-column: 3 / 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@media (min-width: 1200px) {\n\t\t\t\t.leftSide, .rightSide {\n\t\t\t\t\tmax-width: 10rem;\n\t\t\t\t\tpadding: 10px 2rem;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"gridContainer\">\n\t\t\t<div class=\"header\">\n\t\t\t\t<h2>Header</h2>\n\t\t\t\t<div class=\"nav\">\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"leftSide\">\n\t\t\t\t<div class=\"nav\">\n\t\t\t\t\t<i>Side Navigation:</i> Chose one of the main topics first\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"mainContent\">\n\t\t\t\t<i>Main Content:</i> Chose a topic to see the related information\n\t\t\t</div>\n\t\t\t<div class=\"rightSide\">\n\t\t\t\t<i>Additional Information:</i> Links to external resources\n\t\t\t</div>\n\t\t\t<div class=\"footer\">\n\t\t\t\t<h2>Footer: \n\t\t\t\t\t<span>\t\n\t\t\t\t\t\t<a href=\"#\">Sitemap</a>\n\t\t\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t\t\t\t<a href=\"#\">News</a>\n\t\t\t\t\t\t<a href=\"#\">Contact</a>\n\t\t\t\t\t\t<a href=\"#\">About</a>\n\t\t\t\t\t</span>\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tlet mainNav, siteContent, leftNav, mainContent, activeButtonMain, rightSide, navHistory;\n\n\t\t\tfunction buildButton(name, clickFunction) {\n\t\t\t\tconst newButton = document.createElement('a');\n\t\t\t\tnewButton.setAttribute('href', '#');\n\t\t\t\tnewButton.setAttribute('class', 'button');\n\t\t\t\tnewButton.dataset['target'] = name;\n\t\t\t\tnewButton.innerText = name;\n\t\t\t\tnewButton.addEventListener('click', clickFunction);\n\t\t\t\treturn newButton;\n\t\t\t}\n\n\t\t\tfunction navigateSubmenu(e) {\n\t\t\t\tconst sideNavButtons = leftNav.querySelectorAll('a.button');\n\t\t\t\tfor (let button of sideNavButtons) {\n\t\t\t\t\tbutton.classList.remove('active');\n\t\t\t\t}\n\t\t\t\tthis.classList.add('active');\n\n\t\t\t\tconst target = this.dataset['target'];\n\t\t\t\tconst newContent = siteContent[activeButtonMain][target].content;\n\t\t\t\tconst newReferences = siteContent[activeButtonMain][target].references;\n\t\t\t\tmainContent.innerText = newContent;\n\t\t\t\trightSide.innerHTML = '';\n\t\t\t\tfor (const reference of newReferences) {\n\t\t\t\t\tconst newLink = document.createElement('a');\n\t\t\t\t\tnewLink.setAttribute('href', reference);\n\t\t\t\t\tnewLink.innerText = reference;\n\t\t\t\t\trightSide.appendChild(newLink);\n\t\t\t\t}\n\n\t\t\t\tnavHistory.push(this);\n\n\t\t\t\te.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfunction navigateMainmenu(e) {\n\t\t\t\tconst mainNavButtons = mainNav.querySelectorAll('a.button');\n\t\t\t\tfor (let button of mainNavButtons) {\n\t\t\t\t\tbutton.classList.remove('active');\n\t\t\t\t}\n\t\t\t\tthis.classList.add('active');\n\n\t\t\t\tconst target = this.dataset['target'];\n\t\t\t\tconst contentSubNav = siteContent[target];\n\t\t\t\tleftNav.innerHTML = '';\n\t\t\t\tfor (let subItem of Object.keys(contentSubNav)) {\n\t\t\t\t\tconst newButton = buildButton(subItem, navigateSubmenu);\n\t\t\t\t\tleftNav.appendChild(newButton);\n\t\t\t\t}\n\t\t\t\tactiveButtonMain = target;\n\t\t\t\tnavHistory.push(this);\n\t\t\t\te.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfunction handleBackButtonNavigation() {\n\t\t\t\thistory.pushState({page: 1}, \"\", \"\");\n\t\t\t\twindow.addEventListener('popstate', function(event) {\n\t\t\t\t\tif (navHistory.length) {\n\t\t\t\t\t\thistory.pushState(null, null, window.location.pathname);\n\t\t\t\t\t\tconst previousNavitem = navHistory[navHistory.length - 2];\n\t\t\t\t\t\tnavHistory.pop();\n\t\t\t\t\t\tif (previousNavitem) {\n\t\t\t\t\t\t\tpreviousNavitem.click();\n\t\t\t\t\t\t\tnavHistory.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thistory.back();\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t}\n\n\t\t\tasync function init() {\n\t\t\t\tmainNav = document.querySelector('.header .nav');\n\t\t\t\tleftNav = document.querySelector('.leftSide .nav');\n\t\t\t\tmainContent = document.querySelector('.mainContent');\n\t\t\t\trightSide = document.querySelector('.rightSide');\n\t\t\t\tnavHistory = [];\n\n\t\t\t\tsiteContent = JSON.parse(await (await fetch('data/navigator_contents_exer_5.json')).text());\n\t\t\t\tfor (let element of Object.keys(siteContent)) {\n\t\t\t\t\tconst newButton = buildButton(element, navigateMainmenu);\n\t\t\t\t\tmainNav.appendChild(newButton);\n\t\t\t\t}\n\t\t\t\thandleBackButtonNavigation();\n\t\t\t}\n\n\t\t\tinit();\n\t\t</script>\n\t</body>\n</html>",
            "type": "HTML und Javascript",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
          "https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects/JSON"
        ]
      }
    ]
  },
  {
    "name": "Übung 6 - SVG",
    "learningObjectives": [
      "Konzepte von Scalable Vector Graphics (SVG) beschreiben können",
      "Eigene SVG-Grafiken von Hand implementieren können",
      "SVG-Grafiken animieren können",
      "SVG-Grafiken mit Interaktion versehen können",
      "Transformationen, Transitionen und Animationen in CSS, SMIL und JavaScript schreiben können",
      "interaktive SVG-Elemente implementieren können"
    ],
    "items": [
      {
        "heading": "Statistik-Balkendiagramm in SVG",
        "name": "Übung 6.1",
        "task": "Implementieren Sie ein Balkendiagramm mit Inline SVG. Geben Sie die Daten für das Balkendiagramm im JSON-Format vor. Nehmen Sie als Beispieldaten die Sitzverteilung im Deutschen Bundestag. Animieren Sie die Grafik ähnlich wie im Highchart Bar Chart.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Statistik-Balkendiagramm in SVG</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        svg {\n            background: #ddd;\n        }\n        svg text {\n            font-weight: bold;\n            font-family: Verdana;\n            font-size: 14px;\n        }\n        .barChart {\n            display: none;\n        }\n        @media (min-width: 768px) {\n            .barChart {\n                display: block;\n            }\n            .barChartMobile {\n                display: none;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"statisticsBarChart\">\n        <h1>Statistik-Balkendiagramm in SVG</h1>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"barChart\" width=\"700\" height=\"250\" viewBox=\"0 0 700 250\">\n\n        </svg>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"barChartMobile\" width=\"350\" height=\"460\" viewBox=\"0 0 350 460\">\n\n        </svg>\n    </div>\n    <script>\n        let barChartElement, barChartElementMobile;\n        function getBarChartData() {\n            fetch(\"data/barChart.json\")\n                .then(response => response.json())\n                .then(data => {\n                    buildSvgChart(data);\n                    buildSvgChartMobile(data);\n                    const bars = document.querySelectorAll(\"svg rect\");\n                    const numberSeats = document.querySelectorAll(\"svg text.numberSeats\");\n                    for (const bar of bars) {\n                        bar.addEventListener('mouseover', function() {\n                            for (const bar2 of bars) {\n                                bar2.style.opacity = \"0.3\";\n                            }\n                            for (const seat of numberSeats) {\n                                seat.style.opacity = \"0.3\";\n                            }\n                            this.style.opacity = \"1.0\";\n                            this.nextSibling.style.opacity = \"1.0\";\n                        });\n                        bar.addEventListener('mouseout', function() {\n                            for (const bar2 of bars) {\n                                bar2.style.opacity = \"1.0\";\n                            }\n                            for (const seat of numberSeats) {\n                                seat.style.opacity = \"1.0\";\n                            }\n                        });\n                    }\n                });\n        }\n\n        function buildSvgChart(data) {\n            buildCoordinateSystem();\n            for (const [index, item] of data.entries()) {\n                let verticalPosition = 42 + index * 28;\n                // add name of party\n                const partyName = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                partyName.innerHTML = item.party;\n                partyName.setAttribute('x', '10');\n                partyName.setAttribute('y', verticalPosition);\n                partyName.setAttribute('fill', item.color);\n                barChartElement.append(partyName);\n\n                // add seats of party\n                const bar = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n                bar.setAttribute('x', '220');\n                bar.setAttribute('y', verticalPosition - 14);\n                bar.setAttribute('width', item.numberSeats * 2);\n                bar.setAttribute('height', '14');\n                bar.setAttribute('fill', item.color);\n                barChartElement.append(bar);\n\n                const numberSeats = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                numberSeats.innerHTML = item.numberSeats;\n                numberSeats.setAttribute('x', 230 + item.numberSeats * 2);\n                numberSeats.setAttribute('y', verticalPosition);\n                numberSeats.setAttribute('fill', item.color);\n                numberSeats.setAttribute('class', 'numberSeats');\n                barChartElement.append(numberSeats);\n            }\n        }\n\n        function buildSvgChartMobile(data) {\n            buildCoordinateSystemMobile();\n            for (const [index, item] of data.entries()) {\n                let verticalPosition = 42 + index * 56;\n                // add name of party\n                const partyName = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                partyName.innerHTML = item.party;\n                partyName.setAttribute('x', '20');\n                partyName.setAttribute('y', verticalPosition);\n                partyName.setAttribute('fill', item.color);\n                barChartElementMobile.append(partyName);\n\n                // add seats of party\n                const bar = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n                bar.setAttribute('x', '20');\n                bar.setAttribute('y', verticalPosition + 14);\n                bar.setAttribute('width', item.numberSeats);\n                bar.setAttribute('height', '14');\n                bar.setAttribute('fill', item.color);\n                barChartElementMobile.append(bar);\n\n                const numberSeats = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                numberSeats.innerHTML = item.numberSeats;\n                numberSeats.setAttribute('x', 230);\n                numberSeats.setAttribute('y', verticalPosition);\n                numberSeats.setAttribute('fill', item.color);\n                numberSeats.setAttribute('class', 'numberSeats');\n                barChartElementMobile.append(numberSeats);\n            }\n        }\n\n        function buildCoordinateSystem() {\n            buildMarker(0, 220, 5);\n            buildMarker(50, 320, 10);\n            buildMarker(100, 420, 15);\n            buildMarker(150, 520, 15);\n            buildMarker(200, 620, 15);\n        }\n\n        function buildCoordinateSystemMobile() {\n            buildMarker(0, 20, 5, true);\n            buildMarker(50, 70, 15, true);\n            buildMarker(100, 120, 15, true);\n            buildMarker(150, 170, 15, true);\n            buildMarker(200, 220, 15, true);\n        }\n\n        function buildMarker(number, horizontalPos, textIndent, mobile = false) {\n            const zeroMarker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            zeroMarker.innerHTML = number;\n            zeroMarker.setAttribute('x', horizontalPos - textIndent);\n            zeroMarker.setAttribute('fill', \"#000\");\n            if (mobile) {\n                zeroMarker.setAttribute('y', 440);\n                barChartElementMobile.append(zeroMarker);\n            } else {\n                zeroMarker.setAttribute('y', 240);\n                barChartElement.append(zeroMarker);\n            }\n\n            const zeroLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            zeroLine.setAttribute('x1', horizontalPos);\n            zeroLine.setAttribute('y1', 14);\n            zeroLine.setAttribute('x2', horizontalPos);\n            zeroLine.setAttribute('stroke-width', 1);\n            if (mobile) {\n                zeroLine.setAttribute('y2', 426);\n                zeroLine.setAttribute('stroke', \"#bbb\");\n                barChartElementMobile.append(zeroLine);\n            } else {\n                zeroLine.setAttribute('y2', 226);\n                zeroLine.setAttribute('stroke', \"#999\");\n                barChartElement.append(zeroLine);\n            }\n        }\n\n        function init() {\n            barChartElement = document.querySelector('svg.barChart');\n            barChartElementMobile = document.querySelector('svg.barChartMobile');\n            getBarChartData();\n        }\n\n        init();\n    </script>\n</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/SVG",
          "https://www.bundestag.de/parlament/plenum/sitzverteilung_20wp",
          "https://www.highcharts.com/demo/bar-basic"
        ]
      },
      {
        "heading": "SVG Bezier-Animation",
        "name": "Übung 6.2",
        "task": "Schreiben Sie mit SVG ein Animationswerkzeug für Bezierkurven, wie unter §1 - A lightning introduction vorgegeben.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>SVG Bezier-Animation</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        svg {\n            background: #ddd;\n            border: 1px solid #000;\n        }\n        .bezierAnchor:hover {\n            cursor: grab;\n        }\n        .editor {\n            display: none;\n        }\n        @media (min-width: 768px) {\n            .editor {\n                display: block;\n            }\n            .editorMobile {\n                display: none;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"bezier\">\n        <h1>SVG Bezier-Animation</h1>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"editor\" width=\"800\" height=\"600\" viewBox=\"0 0 800 600\">\n            <line id=\"line1\" x1=\"400\" y1=\"150\" x2=\"150\" y2=\"400\" stroke=\"#999\" stroke-width=\"2\" stroke-dasharray=\"6 4\"></line>\n            <line id=\"line2\" x1=\"400\" y1=\"150\" x2=\"650\" y2=\"400\" stroke=\"#999\" stroke-width=\"2\" stroke-dasharray=\"6 4\"></line>\n            <path class=\"bezierCurve\" d=\"M150,400 Q400,150 650,400\" fill=\"none\" stroke=\"#000\" stroke-width=\"3\"></path>\n            <circle id=\"p1\" class=\"bezierAnchor\" cx=\"150\" cy=\"400\" r=\"10\" fill=\"#169116\"></circle>\n            <circle id=\"p2\" class=\"bezierAnchor\" cx=\"650\" cy=\"400\" r=\"10\" fill=\"#169116\"></circle>\n            <circle id=\"c\" class=\"bezierAnchor\" cx=\"400\" cy=\"150\" r=\"10\" fill=\"#169116\"></circle>\n        </svg>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"editorMobile\" width=\"400\" height=\"500\" viewBox=\"0 0 400 500\">\n            <line id=\"line1\" x1=\"200\" y1=\"100\" x2=\"50\" y2=\"400\" stroke=\"#999\" stroke-width=\"2\" stroke-dasharray=\"6 4\"></line>\n            <line id=\"line2\" x1=\"200\" y1=\"100\" x2=\"350\" y2=\"400\" stroke=\"#999\" stroke-width=\"2\" stroke-dasharray=\"6 4\"></line>\n            <path class=\"bezierCurve\" d=\"M50,400 Q200,100 350,400\" fill=\"none\" stroke=\"#000\" stroke-width=\"3\"></path>\n            <circle id=\"p1\" class=\"bezierAnchor\" cx=\"50\" cy=\"400\" r=\"10\" fill=\"#169116\"></circle>\n            <circle id=\"p2\" class=\"bezierAnchor\" cx=\"350\" cy=\"400\" r=\"10\" fill=\"#169116\"></circle>\n            <circle id=\"c\" class=\"bezierAnchor\" cx=\"200\" cy=\"100\" r=\"10\" fill=\"#169116\"></circle>\n        </svg>\n    </div>\n    <script>\n        let svg, point1, point2, controlPoint;\n        function init() {\n            if (window.innerWidth < 768) {\n                svg = document.querySelector('svg.editorMobile');\n\n            } else {\n                svg = document.querySelector('svg.editor');\n            }\n            point1 = svg.querySelector('circle#p1');\n            point2 = svg.querySelector('circle#p2');\n            controlPoint = svg.querySelector('circle#c');\n\n            point1.addEventListener('mousedown', event => {\n                handlePointDragging(point1);\n            });\n            point2.addEventListener('mousedown', event => {\n                handlePointDragging(point2);\n            });\n            controlPoint.addEventListener('mousedown', event => {\n                handlePointDragging(controlPoint);\n            });\n        }\n\n        function handlePointDragging(element) {\n            let dragging = true;\n            element.style.cursor = 'grabbing';\n            element.addEventListener('mousemove', moveEvent => {\n                if (dragging) {\n                    const transformedCoord = transformCoordinates(moveEvent);\n                    element.setAttribute('cx', transformedCoord.x);\n                    element.setAttribute('cy', transformedCoord.y);\n                    recalculateBezier();\n                }\n            });\n            element.addEventListener('mouseup', upEvent => {\n                dragging = false;\n                element.style.cursor = 'grab';\n            });\n        }\n\n        function transformCoordinates(mouseEvent) {\n            const point = svg.createSVGPoint();\n            point.x = mouseEvent.clientX;\n            point.y = mouseEvent.clientY;\n            const svgP = point.matrixTransform(svg.getScreenCTM().inverse());\n            return svgP;\n        }\n\n        function recalculateBezier() {\n            const bezierCurve = document.querySelector('svg path.bezierCurve');\n            const line1 = document.querySelector('svg line#line1');\n            const line2 = document.querySelector('svg line#line2');\n\n            const xPoint1 = point1.getAttribute('cx');\n            const yPoint1 = point1.getAttribute('cy');\n            const xPoint2 = point2.getAttribute('cx');\n            const yPoint2 = point2.getAttribute('cy');\n            const xControl = controlPoint.getAttribute('cx');\n            const yControl = controlPoint.getAttribute('cy');\n            const newCurve = `M${xPoint1},${yPoint1} Q${xControl},${yControl} ${xPoint2},${yPoint2}`\n\n            bezierCurve.setAttribute('d', newCurve);\n            line1.setAttribute('x1', xControl);\n            line1.setAttribute('y1', yControl);\n            line1.setAttribute('x2', xPoint1);\n            line1.setAttribute('y2', yPoint1);\n            line2.setAttribute('x1', xControl);\n            line2.setAttribute('y1', yControl);\n            line2.setAttribute('x2', xPoint2);\n            line2.setAttribute('y2', yPoint2);\n        }\n\n        init();\n    </script>\n</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/SVG",
          "https://pomax.github.io/bezierinfo/#introduction"
        ]
      },
      {
        "heading": "Kalligraphie-Editor in SVG",
        "name": "Übung 6.3",
        "task": "Schreiben Sie mit SVG einen Kalligraphie-Editor mit folgenden Features:\n\nIm Zeichenbereich kann man mit der Maus Linien erzeugen.\nEine durchgehende Linie wird nur erzeugt, solange man die Maus gedrückt hält.\nJe langsamer man den Cursor bewegt, desto dicker wird die Linie (so als ob das Papier an der Stelle die Tinte schneller aufsaugt).",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Kalligraphie-Editor in SVG</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        svg {\n            background: #ddd;\n            border: 1px solid #000;\n        }\n        svg text {\n            font-weight: bold;\n            font-family: Verdana;\n            font-size: 14px;\n        }\n        .editor {\n            display: none;\n        }\n        @media (min-width: 768px) {\n            .editor {\n                display: block;\n            }\n            .editorMobile {\n                display: none;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"statisticsBarChart\">\n        <h1>Kalligraphie-Editor in SVG</h1>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"editor\" width=\"800\" height=\"600\" viewBox=\"0 0 800 600\">\n\n        </svg>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"editorMobile\" width=\"400\" height=\"500\" viewBox=\"0 0 400 500\">\n\n        </svg>\n    </div>\n    <script>\n        let svg = null;\n        if (window.innerWidth < 768) {\n            svg = document.querySelector('svg.editorMobile');\n\n        } else {\n            svg = document.querySelector('svg.editor');\n        }\n\n        svg.addEventListener('mousedown', downEvent => {\n            let drawing = true;\n            const lineToDraw = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n            const point = transformCoordinates(downEvent);\n            lineToDraw.setAttribute('d', `M${point.x},${point.y} L${point.x},${point.y}`);\n            lineToDraw.setAttribute('fill', 'transparent');\n            lineToDraw.setAttribute('stroke', 'blue');\n            lineToDraw.setAttribute('stroke-width', '2');\n            svg.append(lineToDraw);\n            this.addEventListener('mousemove', moveEvent => {\n                if (drawing) {\n                    let currentLine = lineToDraw.getAttribute('d');\n                    const newPoint = transformCoordinates(moveEvent);\n                    currentLine += `L${newPoint.x},${newPoint.y}`;\n                    lineToDraw.setAttribute('d', currentLine);\n                }\n            })\n            svg.addEventListener('mouseup', upEvent => {\n                drawing = false;\n            });\n        });\n\n        function transformCoordinates(mouseEvent) {\n            const point = svg.createSVGPoint();\n            point.x = mouseEvent.clientX;\n            point.y = mouseEvent.clientY;\n            const svgP = point.matrixTransform(svg.getScreenCTM().inverse());\n            return svgP;\n        }\n    </script>\n</body>\n</html>",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/SVG",
          "https://www.youtube.com/watch?v=Km2KsZBqktQ"
        ]
      }
    ]
  },
  {
    "name": "Übung 7 - Node",
    "learningObjectives": [
      "Kommandozeilen-Tools in Node.js schreiben können.",
      "Mit npm Pakete verwalten können.",
      "Web-Server mit Express.js bauen können.",
      "Module für deno.land bauen können."
    ],
    "items": [
      {
        "heading": "File Generatoren",
        "name": "Übung 7.1",
        "task": "Schreiben Sie in Node.js zwei Kommandozeilen-Tools, um große Dateien zu erzeugen.\n\n1. node number_file_gen.js 20_000\n\nsoll eine Datei mit 20.000 Zeilen erzeugen. In jeder Zeile soll die Zeilennummer und ein Punkt stehen. 20.000 ist dabei ein Parameter des Tools. Jede andere Zahl soll ebenfalls erlaubt sein.\n\n2. node alpha_file_gen.js 123456\n\nsoll eine Datei mit 123456 Zeilen erzeugen. In jeder Zeile soll eine Variation mit Wiederholung aller Großbuchstaben (ohne Umlaute) in folgender Reihenfolge stehen:\n\nA\nB\nC\n...\nZ\nAA\nAB\nAC\nAD\n...\n\nusw.\n\nImplementieren Sie Ihre Kommandozeilen-Tools in modernem ECMAScript 2021.",
        "content": [
          {
            "headline": "ECMAScript 2021-Quellcode für number_file_gen.js",
            "code": "function createOutputFile(textContent) {\n\tconst fs = require('fs');\n\tfs.writeFile('output_number_gen.txt', textContent, function (err) {\n  \t\tif (err) throw err;\n  \t\tconsole.log('File is created successfully.');\n\t});\n}\n\nfunction generateTextLines(numberLines) {\n\tlet textLines = '';\n\tfor (let i = 1; i <= numberLines; i++) {\n\t\ttextLines += i + '. \\n';\n\t}\n\treturn textLines;\n}\n\nfunction init() {\n\tconst numberLines = process.argv.slice(2)[0];\n\tconst fileContent = generateTextLines(numberLines);\n\tcreateOutputFile(fileContent);\n}\n\ninit();",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "ECMAScript 2021-Quellcode für alpha_file_gen.js",
            "code": "const letterMapping = {\n\t0: \"A\",\n\t1: 'B',\n\t2: 'C',\n\t3: 'D',\n\t4: 'E',\n\t5: 'F',\n\t6: 'G',\n\t7: 'H',\n\t8: 'I',\n\t9: 'J',\n\t10: 'K',\n\t11: 'L',\n\t12: 'M',\n\t13: 'N',\n\t14: 'O',\n\t15: 'P',\n\t16: 'Q',\n\t17: 'R',\n\t18: 'S',\n\t19: 'T',\n\t20: 'U',\n\t21: 'V',\n\t22: 'W',\n\t23: 'X',\n\t24: 'Y',\n\t25: 'Z'\n};\n\nfunction createOutputFile(textContent) {\n\tconst fs = require('fs');\n\tfs.writeFile('output_alpha_gen.txt', textContent, function (err) {\n  \t\tif (err) throw err;\n  \t\tconsole.log('File is created successfully.');\n\t});\n}\n\nfunction getLettersTextLine(i) {\n\tlet currentLetter = letterMapping[i % 26];\n\tlet nextLetter = Math.floor(i / 26);\n\treturn nextLetter > 0 ? getLettersTextLine(nextLetter-1) + currentLetter : currentLetter;\n}\n\nfunction generateTextLines(numberLines) {\n\tlet textLines = '';\n\tfor (let i = 0; i < numberLines; i++) {\n\t\ttextLines += getLettersTextLine(i) + '\\n';\n\t}\n\treturn textLines;\n}\n\nfunction init() {\n\tconst numberLines = process.argv.slice(2)[0];\n\tconst fileContent = generateTextLines(numberLines);\n\tcreateOutputFile(fileContent);\n}\n\ninit();",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "File Generatoren",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>File Generatoren</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tfont-family: Arial, Verdana;\n\t\t\tbackground: #fff;\n\t\t\tcolor: #333;\n\t\t}\n\t\t.item {\n\t\t\tmargin-bottom: 30px;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t}\n\t\th2 {\n\t\t\tmargin: 0;\n\t\t}\n\t\tp {\n\t\t\tmargin: 15px 0 0;\n\t\t}\n\t\timg {\n\t\t\tmargin-top: 50px;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.item {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t\timg {\n\t\t\t\tmargin-right: 30px;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>File Generatoren</h1>\n<div class=\"item\">\n\t<h2>Schreiben Sie in Node.js zwei Kommandozeilen-Tools, um große Dateien zu erzeugen.</h2>\n\t<p>\n\t\t<img src=\"img/output_number_gen.png\" />\n\t\t<img src=\"img/output_alpha_gen.png\" />\n\t</p>\n</div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://nodejs.org/en/",
          "https://www.w3schools.com/nodejs/nodejs_intro.asp",
          "https://www.ecma-international.org/wp-content/uploads/ECMA-262_12th_edition_june_2021.pdf"
        ]
      },
      {
        "heading": "Performance Merge",
        "name": "Übung 7.2",
        "task": "Schreiben Sie in Node.js zwei Programme merge_files.js und merge_streams.js, um große Dateien zu zeilenweise zusammenzuführen, merge_files.js mit fs.readFile und merge_streams.js mit Streams, also createReadFileStream und pipeline.\n\n1. node merge_files.js big_file1.txt big_file2.txt\n2. node merge_streams.js big_file1.txt big_file2.txt\n\nImplementieren Sie Ihre beiden Programme merge_files.js und merge_streams.js in modernem ECMAScript 2021.\n\nMessen Sie anschließend die Performanz beider Programme.",
        "content": [
          {
            "headline": "ECMAScript 2021-Quellcode für merge_files.js",
            "code": "const fs = require('fs').promises;\nlet time;\n\nfunction createOutputFile(textContent) {\n\tfs.writeFile('output_merge_files.txt', textContent, function (err) {\n  \t\tif (err) throw err;\n\t});\n\tconsole.log('File is created successfully.');\n\tconst duration = new Date() - time;\n\tconst timeOutput = duration / 1000;\n\tconsole.log('Merging took ' + timeOutput + ' seconds');\n}\n\nasync function createFileContent(file1, file2) {\n\tlet fileContent = '';\n\tconst [text1, text2] = await Promise.all([\n\t\tfs.readFile(file1, 'utf8'),\n\t\tfs.readFile(file2, 'utf8'),\n\t]);\n\tconst lines1 = text1.split(\"\\n\");\n\tconst lines2 = text2.split(\"\\n\");\n\tlet count = 0;\n\tfor (const line of lines1){\n\t\tfileContent += line + lines2[count++] + \"\\n\";\n\t}\n\tcreateOutputFile(fileContent);\n}\n\nfunction init() {\n\tconst file1 = process.argv.slice(2)[0];\n\tconst file2 = process.argv.slice(2)[1];\n\ttime = new Date();\n\tcreateFileContent(file1, file2);\n}\n\ninit();",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "ECMAScript 2021-Quellcode für merge_streams.js",
            "code": "const fs = require('fs');\nconst { pipeline } = require('stream/promises');\nlet time;\n\nfunction createOutputFile(textContent) {\n\tfs.writeFile('output_merge_streams.txt', textContent, function (err) {\n  \t\tif (err) throw err;\n\t});\n\tconsole.log('File is created successfully.');\n\tconst duration = new Date() - time;\n\tconst timeOutput = duration / 1000;\n\tconsole.log('Das Mergen hat ' + timeOutput + 'Sekunden gedauert');\n}\n\nasync function createFileContent(file1, file2) {\n\tlet fileContent = '';\n\tawait pipeline(\n\t\tfs.createReadStream(file1, 'utf8'),\n\t\tasync function (source) {\n\t\t\tsource.setEncoding('utf8');\n\t\t\tawait pipeline(\n\t\t\t\tfs.createReadStream(file2, 'utf8'),\n\t\t\t\tasync function (source2) {\n\t\t\t\t\tsource2.setEncoding('utf8');\n\t\t\t\t\tfor await (const chunk of source) {\n\t\t\t\t\t\tfor await (const chunk2 of source2) {\n\t\t\t\t\t\t\ttext1 = chunk.split(\"\\n\");\n\t\t\t\t\t\t\ttext2 = chunk2.split(\"\\n\");\n\t\t\t\t\t\t\tlet count = 0;\n\t\t\t\t\t\t\tfor (const line of text1){\n\t\t\t\t\t\t\t\tfileContent += line + text2[count++] + \"\\n\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcreateOutputFile(fileContent);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n}\n\nfunction init() {\n\tconst file1 = process.argv.slice(2)[0];\n\tconst file2 = process.argv.slice(2)[1];\n\ttime = new Date();\n\tcreateFileContent(file1, file2);\n}\n\ninit();",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Performance Merge",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Performance Merge</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tfont-family: Arial, Verdana;\n\t\t\tbackground: #fff;\n\t\t\tcolor: #333;\n\t\t}\n\t\t.item {\n\t\t\tmargin-bottom: 30px;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t}\n\t\th2 {\n\t\t\tmargin: 0;\n\t\t}\n\t\tp {\n\t\t\tmargin: 15px 0 0;\n\t\t}\n\t\timg {\n\t\t\tmargin-top: 50px;\n\t\t\tmax-width: 100%;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.item {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t\timg {\n\t\t\t\tmargin-right: 30px;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>Performance Merge</h1>\n<div class=\"item\">\n\t<h2>\n\t\tSchreiben Sie in Node.js zwei Programme merge_files.js und merge_streams.js, um große Dateien zu zeilenweise\n\t\tzusammenzuführen, merge_files.js mit fs.readFile und merge_streams.js mit Streams, also createReadFileStream\n\t\tund pipeline.\n\t</h2>\n\t<p>\n\t\t<img src=\"img/output_merge_files.png\" />\n\t\t<img src=\"img/output_merge_streams.png\" />\n\t</p>\n</div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Performanz-Messung",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Performanz-Messungen</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tfont-family: Arial, Verdana;\n\t\t\tbackground: #fff;\n\t\t\tcolor: #333;\n\t\t}\n\t\t.item {\n\t\t\tmargin-bottom: 30px;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t}\n\t\th2 {\n\t\t\tmargin: 0;\n\t\t}\n\t\tp {\n\t\t\tmargin: 15px 0 0;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.item {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>Performanz-Messungen</h1>\n<div class=\"item\">\n\t<h2>Geben Sie hier die Ergebnisse Ihrer Performanz-Messungen ein:</h2>\n\t<p>\n\t\tEs wurden insgesamt <i>10</i> Messungen pro Variante durchgeführt. Dabei kamen folgende Messergebnisse heraus: <br><br>\n\t\t<b>merge_files.js: </b>69ms, 65ms, 71ms, 68ms, 67ms, 67ms, 68ms, 68ms, 71ms, 68ms. <br>\n\t\tMerge_files hat also im Schnitt <u>68,2ms</u> für das Mergen gebraucht. <br><br>\n\t\t<b>merge_streams.js: </b>51ms, 53ms, 51ms, 54ms, 53ms, 52ms, 53ms, 51ms, 51ms, 54ms. <br>\n\t\tBei merge_streams hat das Mergen hingegen im Schnitt nur <u>52,3ms</u> gedauert.\n\t</p>\n</div>\n</body>\n</html>",
            "type": "Javascript",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://nodejs.org/en/",
          "https://www.w3schools.com/nodejs/nodejs_intro.asp",
          "https://www.ecma-international.org/wp-content/uploads/ECMA-262_12th_edition_june_2021.pdf"
        ]
      },
      {
        "heading": "Express.js Server",
        "name": "Übung 7.3",
        "task": "Schreiben Sie einen lokalen Express.js-HTTP-Server für den Merge-Dienst, d.h. auf der lokal angezeigten Webseite kann man zwei Dateien auswählen, um diese zeilenweise zu mergen. Das Ergebnis soll dann in der Webseite erscheinen und zum Download angeboten werden.",
        "content": [
          {
            "headline": "ECMAScript 2021-Quellcode für Express.js-Server",
            "code": "const express = require('express');\nconst fs = require('fs').promises;\nconst multer = require('multer');\n\nconst app = express();\nconst port = 3000;\nconst fileStorageEngine = multer.diskStorage({\n    destination: (req, file, cb) => {\n        cb(null, __dirname + '/upload')\n    },\n    filename: (req, file, cb) => {\n        cb(null, file.originalname)\n    }\n});\nconst upload = multer({storage: fileStorageEngine});\n\napp.use(express.urlencoded({ extended: false }));\n\napp.get('/', (req, res) => {\n    const mainContent = buildStartingPage();\n    res.send(mainContent);\n});\n\napp.post('/merge', upload.array('text-files'), (req, res) => {\n    const file1 = req.files[0].path;\n    const file2 = req.files[1].path;\n    createFileContent(file1, file2).then(fileContent => {\n        createOutputFile(fileContent).then(outputFile => {\n            const fileOutput = fileContent.replaceAll(\"\\n\", \"<br>\");\n            let htmlOutput = buildStartingPage();\n            htmlOutput += '<div class=\"output\">' +\n                            '<a href=\"' + outputFile + '\" download>Erstellte Datei herunterladen</a>' +\n                            '<p>' + fileOutput + '</p>' +\n                          '</div>';\n            res.send(htmlOutput);\n        });\n    });\n});\n\nfunction buildStartingPage() {\n    const mainContent = '<div class=\"mergeService\">' +\n                            '<h1>Merge-Dienst. Laden Sie zwei Daten hoch, um diese zeilenweise zu mergen.</h1>' +\n                            '<form action=\"/merge\" method=\"post\" enctype=\"multipart/form-data\">' +\n                                '<label for=\"text-files\">Laden Sie die Dateien zum Mergen hoch</label>' +\n                                '<input type=\"file\" id=\"text-files\" name=\"text-files\" multiple /><br><br>' +\n                                '<button type=\"submit\">Dateien mergen</button>' +\n                            '</form> ' +\n                        '</div> ';\n    return mainContent;\n}\n\nasync function createFileContent(file1, file2) {\n    let fileContent = '';\n    const [text1, text2] = await Promise.all([\n        fs.readFile(file1, 'utf8'),\n        fs.readFile(file2, 'utf8'),\n    ]);\n    const lines1 = text1.split(\"\\n\");\n    const lines2 = text2.split(\"\\n\");\n    let count = 0;\n    for (const line of lines1){\n        fileContent += line + lines2[count++] + \"\\n\";\n    }\n    return fileContent;\n}\n\nasync function createOutputFile(textContent) {\n    const pathOutputFile = __dirname + '/output/output_merge_files.txt';\n    await fs.writeFile(pathOutputFile, textContent, function (err) {\n        if (err) throw err;\n    });\n    return pathOutputFile;\n}\n\napp.listen(port, () => {\n    console.log(`listening at http://localhost:${port}`);\n})",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Express.js Server",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Express.js Server</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\tbody {\n\t\t\tfont-family: Arial, Verdana;\n\t\t\tbackground: #fff;\n\t\t\tcolor: #333;\n\t\t}\n\t\t.only-desktop {\n\t\t\tdisplay: none;\n\t\t}\n\t\t.item {\n\t\t\tmargin-bottom: 30px;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t}\n\t\th2 {\n\t\t\tmargin: 0;\n\t\t}\n\t\tp {\n\t\t\tmargin: 15px 0 0;\n\t\t}\n\t\timg {\n\t\t\tmax-width: 100%;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.item {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t\t.only-mobile {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.only-desktop {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n<h1>Express.js Server</h1>\n<div class=\"item\">\n\t<h2>Schreiben Sie einen lokalen Express.js-HTTP-Server für den Merge-Dienst, d.h. auf der lokal angezeigten Webseite kann man zwei Dateien auswählen, um diese zeilenweise zu mergen. Das Ergebnis soll dann in der Webseite erscheinen und zum Download angeboten werden.</h2>\n\t<br>\n\t<p>\n\t\t<img class=\"only-desktop\" src=\"img/express.js.png\" />\n\t\t<img class=\"only-mobile\" src=\"img/express_mobile.png\" />\n\t</p>\n</div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://nodejs.org/en/",
          "https://www.w3schools.com/nodejs/nodejs_intro.asp",
          "https://expressjs.com/de/",
          "https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction"
        ]
      }
    ]
  },
  {
    "name": "Übung 8 - Modular Web",
    "learningObjectives": [
      "Prinzipien der Modularität beschreiben und anwenden können.",
      "Component Based SE (CBSE) beschreiben und anwenden können.",
      "W3C-Web-Komponenten-Standards beschreiben und anwenden können.",
      "Unterschiedliche Möglichkeiten der Parametrisierung von W3C-Web-Komponenten nutzen können.",
      "Lebenszyklus von Web-Komponenten nutzen können.",
      "Web-Komponenten nutzen können.",
      "Mit LitElement Web-Komponenten selber programmieren können."
    ],
    "items": [
      {
        "heading": "Web-Komponenten erstellen",
        "name": "Übung 8.1",
        "task": "Verpacken Sie Ihre Lösungen aus LE04 in wiederverwendbare Web-Komponenten. Dabei können Sie alle Hilfsmittel aus Lit verwenden.",
        "content": [
          {
            "headline": "Web-Komponente für die Einkaufsliste",
            "code": "import { LitElement, html, css } from 'https://unpkg.com/lit-element/lit-element.js?module';\n\nclass GroceryList extends LitElement {\n\n\tstatic get styles() {\n\t\treturn css`\n\t\t.groceryList {\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tbackground: #ddd;\n\t\t\theight: 90%;\n\t\t}\n\t\t.groceryList h1 {\n\t\t\tmargin-top: 0;\n\t\t}\n\t\t.groceryList .form {\n\t\t\tdisplay: flex;\n\t\t}\n\t\t.groceryList .form input {\n\t\t\twidth: 100%;\n\t\t}\n\t\t.groceryList .form button {\n\t\t\tmargin-left: 3px;\n\t\t}\n\t\tul.shoppingList {\n\t\t\tpadding-left: 28px;\n\t\t}\n\t\tul.shoppingList li {\n\t\t\tmargin: 5px 0;\n\t\t}\n\t\t@media (min-width: 600px) {\n\t\t\t.groceryList .form {\n\t\t\t\theight: 30px;\n\t\t\t}\n\t\t\t.groceryList .form input {\n\t\t\t\twidth: 200px;\n\t\t\t}\n\t\t}\n\t\t`;\n\t}\n\n\tstatic get properties() {\n\t\treturn {\n\t\t\titems: { type: Array },\n\t\t\tnewItem: { type: String }\n\t\t}\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.items = [];\n\t\tthis.newItem = '';\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<div class=\"groceryList\">\n\t\t\t\t<h1>Einkaufsliste</h1>\n\t\t\t\t<div class=\"newItemHandler\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tEnter a new item:\n\t\t\t\t\t</p>\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t\t<input type=\"text\" \n\t\t\t\t\t\t\t   class=\"itemName\" \n\t\t\t\t\t\t\t   value=\"${this.newItem}\"\n\t\t\t\t\t\t\t   @change=\"${this.updateList}\"\n\t\t\t\t\t\t\t   @keyup=\"${this.shortcutListener}\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button class=\"addItem\"\n\t\t\t\t\t\t\t\t@click=\"${this.addItem}\"\n\t\t\t\t\t\t>Add item</button>\n\t\t\t\t\t\t<button class=\"clearList\"\n\t\t\t\t\t\t\t\t@click=\"${this.clearList}\"\n\t\t\t\t\t\t>Clear List</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"shoppingList\">\n\t\t\t\t\t${this.items.map(item => html`\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t${item.name}\n\t\t\t\t\t\t\t<button @click=\"${() => this.deleteItem(item.id)}\">Delete</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t`)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t`;\n\t}\n\n\tshortcutListener(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis.addItem();\n\t\t}\n\t}\n\n\tupdateList(e) {\n\t\tthis.newItem = e.target.value;\n\t}\n\n\taddItem() {\n\t\tif(this.newItem) {\n\t\t\tthis.items = [...this.items, {\n\t\t\t\tid: this.items.length + 1,\n\t\t\t\tname: this.newItem\n\t\t\t}];\n\t\t}\n\t}\n\n\tclearList() {\n\t\tthis.items = [];\n\t}\n\n\tdeleteItem(id) {\n\t\tthis.items = this.items.filter(item => item.id !== id);\n\t}\n\n}\n\ncustomElements.define('grocery-list', GroceryList);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Einkaufsliste",
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"module\" src=\"js/script8.1.1.js\"></script>\n\t\t<title>Einkaufsliste</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t\t.shoppingListContainer {\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t\theight: 90%;\n\t\t\t}\n\t\t\t.shoppingListContainer h1 {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\t\t\t.shoppingListContainer .form {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.shoppingListContainer .form input {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.shoppingListContainer .form button {\n\t\t\t\tmargin-left: 3px;\n\t\t\t}\n\t\t\tul.shoppingList {\n\t\t\t\tpadding-left: 28px;\n\t\t\t}\n\t\t\tul.shoppingList li {\n\t\t\t\tmargin: 5px 0;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.shoppingListContainer .form {\n\t\t\t\t\theight: 30px;\n\t\t\t\t}\n\t\t\t\t.shoppingListContainer .form input {\n\t\t\t\t\twidth: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<grocery-list></grocery-list>\n\t</body>\n</html>\n",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Web-Komponente für die Rednerliste",
            "code": "import { LitElement, html, css } from 'https://unpkg.com/lit-element/lit-element.js?module';\n\nclass SpeakersList extends LitElement {\n\n\tstatic get styles() {\n\t\treturn css`\n\t\t\tbutton {\n\t\t\t\tmin-height: 30px;\n\t\t\t}\n\t\t\t.SpeakerList {\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t\theight: 90%;\n\t\t\t}\n\t\t\t.SpeakerList h1 {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\t\t\t.SpeakerList .form {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.SpeakerList .form input {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.SpeakerList .form button {\n\t\t\t\tmargin-left: 3px;\n\t\t\t}\n\t\t\tul.speakers {\n\t\t\t\tpadding-left: 28px;\n\t\t\t}\n\t\t\tul.speakers li {\n\t\t\t\tmargin: 5px 0;\n\t\t\t}\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t.SpeakerList .form {\n\t\t\t\t\theight: 30px;\n\t\t\t\t}\n\t\t\t\t.SpeakerList .form input {\n\t\t\t\t\twidth: 200px;\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\t}\n\n\tstatic get properties() {\n\t\treturn {\n\t\t\tspeakers: { type: Array },\n\t\t\tnewSpeaker: { type: String }\n\t\t}\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.speakers = [];\n\t\tthis.newSpeaker = '';\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<div class=\"SpeakerList\">\n\t\t\t\t<h1>Rednerliste</h1>\n\t\t\t\t<div class=\"newSpeakerHandler\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tNeuer Redner:\n\t\t\t\t\t</p>\n\t\t\t\t\t<div class=\"form\">\n\t\t\t\t\t\t<input type=\"text\" value=\"${this.newItem}\" @change=\"${this.updateList}\" @keyup=\"${this.shortcutListener}\" />\n\t\t\t\t\t\t<button @click=\"${this.addSpeaker}\">Hinzufügen</button>\n\t\t\t\t\t\t<button @click=\"${this.clearList}\">Liste leeren</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"speakers\">\n\t\t\t\t\t${this.speakers.map(speaker => html`\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t${speaker.name} ${this.formatTime(speaker.time)}\n\t\t\t\t\t\t\t<button @click=\"${() => this.handleSpeaking(speaker)}\">${speaker.speaking ? 'Stop!' : 'Start!'}</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t`)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t`;\n\t}\n\n\tshortcutListener(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis.addSpeaker();\n\t\t}\n\t}\n\n\trefreshOutput() {\n\t\tthis.speakers = [...this.speakers];\n\t}\n\n\tupdateList(e) {\n\t\tthis.newSpeaker = e.target.value;\n\t}\n\n\taddSpeaker() {\n\t\tif(this.newSpeaker) {\n\t\t\tthis.speakers = [...this.speakers, {\n\t\t\t\tid: this.speakers.length + 1,\n\t\t\t\tname: this.newSpeaker,\n\t\t\t\ttime: 0,\n\t\t\t\tspeaking: true\n\t\t\t}];\n\t\t\tthis.startTimer(this.speakers[this.speakers.length - 1]);\n\t\t}\n\t}\n\n\tclearList() {\n\t\tthis.speakers = [];\n\t}\n\n\thandleSpeaking(speaker) {\n\t\tspeaker.speaking = !speaker.speaking;\n\t\tthis.speakers = [...this.speakers];\n\t\tif (speaker.speaking) {\n\t\t\tthis.startTimer(speaker);\n\t\t}\n\t}\n\n\tstartTimer(speaker) {\n\t\tconst that = this;\n\t\tfor (const s of this.speakers) {\n\t\t\ts.speaking = false;\n\t\t}\n\t\tspeaker.speaking = true;\n\t\tconst interval = setInterval(function() {\n\t\t\tspeaker.time++;\n\t\t\tthat.speakers = [...that.speakers];\n\t\t\tif (speaker.speaking == false) {\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\tformatTime(time) {\n\t\tconst minutes = Math.floor(time / 60);\n\t\tconst hours = Math.floor(minutes / 60);\n\t\tconst seconds = time - minutes * 60;\n\t\treturn `${hours < 10 ? '0' : ''}${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds} `;\n\t}\n\n}\n\ncustomElements.define('speakers-list', SpeakersList);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Rednerliste",
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"module\" src=\"js/script8.1.2.js\"></script>\n\t\t<title>Rednerliste</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style type=\"text/css\">\n\t\t\thtml, body {\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<speakers-list></speakers-list>\n\t</body>\n</html>\n",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Web-Komponente für die Tabellenkalkulation",
            "code": "import { LitElement, html, css } from 'https://unpkg.com/lit-element/lit-element.js?module';\n\nclass Spreadsheet extends LitElement {\n\n\tstatic get styles() {\n\t\treturn css`\n\t\t\ttable {\n\t\t\t\tborder-collapse: collapse;\n\t\t\t}\n\t\t\ttd {\n\t\t\t\tborder: 1px solid #000;\n\t\t\t\twidth: 200px;\n\t\t\t\theight: 25px;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t\tinput {\n\t\t\t\twidth: 98%;\n\t\t\t\theight: 84%;\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t`;\n\t}\n\n\tstatic get properties() {\n\t\treturn {\n\t\t\tnumberRows: { type: Number },\n\t\t\tnumberColumns: { type: Number },\n\t\t\ttableContent: { type: Array },\n\t\t\talphabetMapping: { type: Array }\n\t\t}\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.numberRows = this.numberRows ?? 10;\n\t\tthis.numberColumns = this.numberColumns ?? 5;\n\t\tthis.tableContent = [];\n\t\tthis.alphabetMapping = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\n\t\tfor (let i = 0; i < this.numberRows; i++) {\n\t\t\tlet contentRows = [];\n\t\t\tfor (let j = 0; j < this.numberColumns; j++) {\n\t\t\t\tconst rowIdentifier = this.alphabetMapping[i];\n\t\t\t\tconst columnIdentifier = j+1;\n\t\t\t\tconst contentCell = {\n\t\t\t\t\tformula: '',\n\t\t\t\t\tresult: '',\n\t\t\t\t\tediting: false,\n\t\t\t\t\tidentifier: \"\" + rowIdentifier + columnIdentifier\n\t\t\t\t};\n\t\t\t\tcontentRows.push(contentCell);\n\t\t\t}\n\t\t\tthis.tableContent.push(contentRows);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<div class=\"spreadsheet\">\n\t\t\t\t<h1>Tabellenkalkulation</h1>\n\t\t\t\t<table>\n\t\t\t\t\t${this.tableContent.map(row => html`\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t${row.map(cell => html`\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" \n\t\t\t\t\t\t\t\t\t\t   @blur=\"${(e) => this.execCalculation(cell, e)}\"\n\t\t\t\t\t\t\t\t\t\t   @focus=\"${(e) => this.showFormula(cell, e)}\"\n\t\t\t\t\t\t\t\t\t\t   value=\"${cell.editing ? cell.formula : cell.result}\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t`)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t`)}\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t`;\n\t}\n\n\texecCalculation(cell, e = null) {\n\t\tcell.editing = false;\n\t\tlet inputString = \"\";\n\t\tif (e) {\n\t\t\tinputString = e.target.value;\n\t\t} else {\n\t\t\tinputString = cell.formula;\n\t\t}\n\n\t\tlet formulaEntered = false;\n\t\tlet typeOfCalc = \"\";\n\n\t\tif (inputString.indexOf(\"=SUM\") >= 0) {\n\t\t\tformulaEntered = true;\n\t\t\ttypeOfCalc = \"sum\";\n\t\t}\n\t\tif (inputString.indexOf(\"=SUB\") >= 0) {\n\t\t\tformulaEntered = true;\n\t\t\ttypeOfCalc = \"subtract\";\n\t\t}\n\t\tif (inputString.indexOf(\"=MUL\") >= 0) {\n\t\t\tformulaEntered = true;\n\t\t\ttypeOfCalc = \"multiply\";\n\t\t}\n\t\tif (inputString.indexOf(\"=DIV\") >= 0) {\n\t\t\tformulaEntered = true;\n\t\t\ttypeOfCalc = \"divide\";\n\t\t}\n\n\t\tif (formulaEntered) {\n\t\t\tconst param1 = inputString.substring(\n\t\t\t\tinputString.indexOf(\"(\") + 1,\n\t\t\t\tinputString.lastIndexOf(\":\")\n\t\t\t);\n\t\t\tconst param2 = inputString.substring(\n\t\t\t\tinputString.indexOf(\":\") + 1,\n\t\t\t\tinputString.lastIndexOf(\")\")\n\t\t\t);\n\n\t\t\tconst cell1 = this.getColumn(param1);\n\t\t\tconst cell2 = this.getColumn(param2);\n\n\t\t\tswitch (typeOfCalc) {\n\t\t\t\tcase \"sum\":\n\t\t\t\t\tcell.result = this.sum(parseInt(cell1.result), parseInt(cell2.result));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"subtract\":\n\t\t\t\t\tcell.result = this.subtract(parseInt(cell1.result), parseInt(cell2.result));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"multiply\":\n\t\t\t\t\tcell.result = this.multiply(parseInt(cell1.result), parseInt(cell2.result));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"divide\":\n\t\t\t\t\tcell.result = this.divide(parseInt(cell1.result), parseInt(cell2.result));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (e) {\n\t\t\t\te.target.value = cell.result;\n\t\t\t}\n\t\t} else {\n\t\t\tcell.result = inputString;\n\t\t}\n\t\tcell.formula = inputString;\n\t\tthis.tableContent = [...this.tableContent];\n\t\tthis.checkForCalcUpdates(cell);\n\t}\n\n\tshowFormula(cell, e) {\n\t\tcell.editing = true;\n\t\te.target.value = cell.formula;\n\t\tthis.tableContent = [...this.tableContent];\n\t}\n\n\tgetColumn(identifier) {\n\t\tconst row = parseInt(identifier.substring(0, 1), 36) - 10;\n\t\tconst column = identifier.substring(1) - 1;\n\t\tconst tableCell = this.tableContent[row][column];\n\t\treturn tableCell;\n\t}\n\n\tsum(x, y) {\n\t\treturn x + y;\n\t}\n\tsubtract(x, y) {\n\t\treturn x - y;\n\t}\n\tmultiply(x, y) {\n\t\treturn x * y;\n\t}\n\tdivide(x, y) {\n\t\treturn x / y;\n\t}\n\n\tcheckForCalcUpdates(tableCell) {\n\t\tfor (const row of this.tableContent) {\n\t\t\tfor (const cell of row) {\n\t\t\t\tif (cell.formula.includes(tableCell.identifier)) {\n\t\t\t\t\tthis.execCalculation(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\ncustomElements.define('spreadsheet-excel-like', Spreadsheet);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Tabellenkalkulation",
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<script type=\"module\" src=\"js/script8.1.3.js\"></script>\n\t\t<title>Tabellenkalkulation</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground: #fff;\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<spreadsheet-excel-like numberRows=\"10\" numberColumns=\"6\"></spreadsheet-excel-like>\n\t</body>\n</html>\n",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/de/docs/Web/Web_Components",
          "https://lit.dev/",
          "https://lit.dev/docs/api/LitElement/"
        ]
      },
      {
        "heading": "LitElement Menü-Komponente",
        "name": "Übung 8.2",
        "task": "Schreiben Sie mit LitElement eine flexible Menü-Komponente, die sich sowohl für horizontale als auch für vertikale Menüs eignet, wie sie sie in Ihrem WWW-Navigator gebrauchen könnten.",
        "content": [
          {
            "headline": "Quellcode der Menü-Komponente",
            "code": "import { LitElement, html, css } from 'https://unpkg.com/lit-element/lit-element.js?module';\n\nexport class Menu extends LitElement {\n\n  static get styles() {\n    return css`\n      .menu.vertical {\n        margin-top: 20px;\n      }\n      .vertical button {\n        display: block;\n        margin-top: 10px;\n      }\n      button {\n        background: #6A709F;\n        color: black;\n        border-radius: 20px;\n        text-decoration: none;\n        padding: 4px 30px;\n        margin: 5px;\n        font-weight: bold;\n        font-family: Arial;\n        border: 2px outset #F9FBFC;\n        font-size: 14px;\n        cursor: pointer;\n      }\n      button:hover,\n      button.active {\n        background: #fff;\n        box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      direction: { type: String },\n      type: { type: String },\n      elementPath: { type: String },\n      elements: { type: Array },\n      subItems: { type: Array },\n      activeMenuItem: { type: Object },\n      dataNavigator: { type: Object }\n    }\n  }\n\n  constructor() {\n    super();\n    this.direction = this.direction ?? 'horizontal';\n    this.type = this.type ?? 'main';\n    this.elementPath = this.elementPath ?? '';\n    this.elements = [];\n    this.subItems = [];\n    this.dataNavigator = this.dataNavigator ?? {};\n    this.activeMenuItem = {};\n  }\n\n  render() {\n    if (!this.elements.length || !this.subItems.length) {\n      this.setNavElements(this.elementPath);\n    }\n\n    if (this.dataNavigator) {\n      this.setVisibleSubnavLinks(this.dataNavigator);\n    }\n\n    return html`\n      <div class=\"menu ${this.direction == 'vertical' ? 'vertical' : ''}\">\n        ${this.elements ? this.elements.map(element => html`\n          <button class=\"${element.active ? 'active' : ''}\" @click=\"${() => this.navigate(element)}\">\n            ${element.name}\n          </button>\n        `) : '' }\n      </div>\n    `;\n  }\n\n  navigate(element) {\n    for (const item of this.elements) {\n      item.active = false;\n    }\n    element.active = true;\n\n    this.activeMenuItem = element;\n    this.dispatchEvent( new CustomEvent('navigate', {\n      detail: {\n        activeMenuItem: this.activeMenuItem\n      }\n    }) );\n  }\n\n  setNavElements(path) {\n    fetch(path).then(response => response.text()).then((data) => {\n      if (this.type == \"main\") {\n        this.elements = JSON.parse(data);\n      } else {\n        this.subItems = JSON.parse(data);\n      }\n    });\n  }\n\n  setVisibleSubnavLinks(activeLink) {\n    const activeLinkname = activeLink.name;\n    for (const subItem of this.subItems) {\n      if (subItem.name == activeLinkname) {\n        this.elements = subItem.items;\n      }\n    }\n\n    this.dataNavigator = null;\n  }\n\n}\n\ncustomElements.define('custom-menu', Menu);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Menü-Komponente",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<script type=\"module\" src=\"js/script8.2.js\"></script>\n\t<title>Menu</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\thtml, body {\n\t\t\theight: 100%;\n\t\t}\n\t\tbody {\n\t\t\tbackground: #fff;\n\t\t\tfont-family: Arial, Verdana;\n\t\t}\n\t\t.menuContainer {\n\t\t\tbackground: #ddd;\n\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 15px;\n\t\t\tmargin-bottom: 30px;\n\t\t}\n\t\t@media (min-width: 768px) {\n\t\t\t.menuContainer {\n\t\t\t\twidth: 66%;\n\t\t\t}\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"menuContainer\">\n\t\t<custom-menu direction=\"horizontal\" type=\"main\" elementPath=\"data/exercise_8_nav_horizontal_main.json\"></custom-menu>\n\t</div>\n\t<div class=\"menuContainer\">\n\t\t<custom-menu direction=\"vertical\" type=\"main\" elementPath=\"data/exercise_8_nav_vertical_sub.json\"></custom-menu>\n\t</div>\n<script>\n\tconst menus = document.querySelectorAll('custom-menu');\n\tfor (const menu of menus) {\n\t\tmenu.addEventListener('navigate', (e) => {console.log(e.detail)});\n\t}\n</script>\n</body>\n</html>\n",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/de/docs/Web/Web_Components",
          "https://lit.dev/",
          "https://lit.dev/docs/api/LitElement/"
        ]
      },
      {
        "heading": "LitElement WWW-Navigator",
        "name": "Übung 8.3",
        "task": "Zerlegen Sie Ihren WWW-Navigator (aus Ü5.4) in wiederverwendbare Web-Komponenten. Implementieren Sie diese mit LitElement.",
        "content": [
          {
            "headline": "Quellcode des WWW-Navigators",
            "code": "import { LitElement, html, css } from 'https://unpkg.com/lit-element/lit-element.js?module';\n\nclass WwwNavigator extends LitElement {\n\n  static get styles() {\n    return css`\n      html, body {\n        height: 100%;\n      }\n      body {\n        margin: 0;\n        background: #fff;\n      }\n      h2 {\n        font-weight: normal;\n        margin:  0;\n      }\n      a.button {\n        background: #6A709F;\n        color: black;\n        border-radius: 20px;\n        text-decoration: none;\n        padding: 4px 30px;\n        margin: 5px;\n        font-weight: bold;\n        font-family: Arial;\n        border: 2px outset #F9FBFC;\n        font-size: 14px;\n      }\n      a.button:hover, \n      a.button.active {\n        background: #fff;\n      }\n      .gridContainer {\n        display: grid;\n        grid-template: auto 1fr auto / auto 1fr auto;\n        margin: 10px;\n        border-radius: 10px;\n        color:  white;\n        text-align: center;\n      }\n      .header {\n        background: #c04f50;\n        border-radius: 10px 10px 0 0;\n        padding: 0 5px 15px;\n      }\n      .header .nav {\n        text-align: left;\n        margin-top: 10px;\n        display: flex;\n        flex-wrap: wrap;\n      }\n      .header, .footer {\n        grid-column: 1 / 4;\n      }\n      .leftSide, .rightSide {\n        padding: 10px;\n        background: #C28280;\n        grid-column: 1 / 4;\n      }\n      .leftSide .nav {\n        display: flex;\n        flex-wrap: wrap;\n      }\n      .leftSide .nav a {\n        margin: 5px;\n      }\n      .mainContent {\n        background: #6D9FBF;\n        overflow-y: auto;\n        padding: 20px;\n        text-align: left;\n        font-family: Arial;\n        grid-column: 1 / 4;\n      }\n      .rightSide a {\n        word-break: break-all;\n      }\n      .footer {\n        background: black;\n        padding-bottom: 15px;\n        border-radius: 0 0 10px 10px;\n      }\n      .footer a {\n        color: white;\n        font-size: 14px;\n      }\n      @media (min-width: 600px) {\n        .gridContainer {\n          height: 95%;\n        }\n        .header .nav,\n        .leftSide .nav {\n          display: block;\n        }\n        .leftSide, .rightSide {\n          padding: 10px 20px;\n          max-width: 6rem;\n        }\n        .leftSide .nav a {\n          display: block;\n          padding: 4px 10px;\n        }\n        .leftSide {\n          grid-column: 1 / 1;\n        }\n        .mainContent {\n          grid-column: 2 / 2;\n        }\n        .rightSide {\n          grid-column: 3 / 3;\n        }\n      }\n      @media (min-width: 1200px) {\n        .leftSide, .rightSide {\n          max-width: 10rem;\n          padding: 10px 2rem;\n        }\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      mainContent: { type: String },\n      references: { type: Array },\n      subNav: { type: Array }\n    }\n  }\n\n  constructor() {\n    super();\n    this.mainContent = '';\n    this.references = [];\n    this.subNav = [];\n  }\n\n  render() {\n    return html`\n        <div class=\"gridContainer\">\n          <div class=\"header\">\n            <h2>Header</h2>\n            <custom-menu direction=\"horizontal\" \n                         type=\"main\" \n                         elementPath=\"data/exercise_8_nav_horizontal_main.json\"\n                         @navigate=\"${(e) => this.updateNav(e)}\"\n            ></custom-menu>\n          </div>\n          <div class=\"leftSide\">\n            <custom-menu .dataNavigator=\"${this.subNav}\" \n                         direction=\"vertical\" \n                         type=\"sub\" \n                         elementPath=\"data/exercise_8_nav_vertical_sub.json\"\n                         @navigate=\"${(e) => this.updateContent(e)}\"\n            ></custom-menu>\n          </div>\n          <div class=\"mainContent\">\n            ${this.mainContent}\n          </div>\n          <div class=\"rightSide\">\n            ${this.references ? this.references.map(reference => html`\n              <a href=\"${reference}\">${reference}</a>\n            `) : 'Additional Information: Links to external ressources'}\n          </div>\n          <div class=\"footer\">\n            <h2>Footer:\n              <span>\n                  <a href=\"#\">Sitemap</a>\n                  <a href=\"#\">Home</a>\n                  <a href=\"#\">News</a>\n                  <a href=\"#\">Contact</a>\n                  <a href=\"#\">About</a>\n              </span>\n            </h2>\n          </div>\n        </div>\n\t`;\n  }\n\n  updateNav(e) {\n    const activeMenuItem = e.detail.activeMenuItem;\n    this.subNav = activeMenuItem;\n  }\n\n  updateContent(e) {\n    const activeMenuItem = e.detail.activeMenuItem;\n    this.mainContent = activeMenuItem.content;\n    this.references = activeMenuItem.references;\n  }\n\n}\n\ncustomElements.define('www-navigator', WwwNavigator);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "WWW-Navigator",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n\t<script type=\"module\" src=\"js/script8.3.js\"></script>\n\t<script type=\"module\" src=\"js/script8.2.js\"></script>\n\t<title>Menu</title>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t<style>\n\t\thtml, body {\n\t\t\theight: 100%;\n\t\t}\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tbackground: #fff;\n\t\t\tfont-family: Arial, Verdana;\n\t\t}\n\t</style>\n</head>\n<body>\n<www-navigator></www-navigator>\n<script>\n\tconst menus = document.querySelectorAll('custom-menu');\n\tfor (const menu of menus) {\n\t\t// menu.addEventListener('navigate', (e) => {console.log(e.detail)});\n\t}\n</script>\n</body>\n</html>\n",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Learn/JavaScript",
          "https://developer.mozilla.org/de/docs/Web/Web_Components",
          "https://lit.dev/",
          "https://lit.dev/docs/api/LitElement/"
        ]
      }
    ]
  },
  {
    "name": "Übung 9 - PWA",
    "learningObjectives": [
      "Progressive Web Apps (PWA) definieren können.",
      "Entscheidungskriterien für PWA-s vs. Native Apps vs. Electron nennen können.",
      "PWA-Manifest schreiben können.",
      "ServiceWorker und Cache nutzen können.",
      "Push Notifications programmieren können.",
      "PWA-s programmieren können.",
      "PWA-Workbox anwenden können.",
      "WebApps in PWA-s umwandeln können.",
      "Core Web Vitals definieren und messen können.",
      "Lighthouse anwenden können.",
      "Abhängigkeitsdiagramm einer App erstellen können.",
      "PRPL Pattern anwenden können."
    ],
    "items": [
      {
        "heading": "PWA",
        "name": "Übung 9.1",
        "task": "Wandeln Sie Ihren LitElement WWW-Navigator aus Aufgabe 8.3 in eine Progressive Web App um.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>PWA</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin: 30px 0;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tmargin: 15px 0 0;\n\t\t\t}\n\t\t\tiframe {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 80vh;\n\t\t\t\tmargin-top: 15px;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\tbody > p {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>PWA</h1>\n\t\t<p>Wandeln Sie Ihren LitElement WWW-Navigator aus Aufgabe 8.3 in eine Progressive Web App um.</p>\n\t\t<p>Hinweis: Für den Betrieb von HTTPS unter localhost siehe web.dev/how-to-use-local-https/ oder HTTPS-Server in Python3</p>\n\t\t<p>Achtung: Lighthouse-Test für PWAs auf localhost ist fehlerhaft in der Chrome-Version 96 (siehe Issues).\n\t\t\tGehen Sie bei Problemen in eine andere Version (Chrome Canary) oder einen anderen Browser. Oder verwenden\n\t\t\tSie Lighthouse auf der Kommandozeile</p>\n\t\t<div class=\"item\">\n\t\t\t<h2>Beschreiben Sie hier Ihr Vorgehen, Ihre Libraries und Tools, die Sie einsetzen:</h2>\n\t\t\t<p>Zur Umsetzung der Progressive Web App habe ich mich hauptsächlich an diesem Youtube-Tutorial orientiert: <br>\n\t\t\t\thttps://www.youtube.com/watch?v=E8BeSSdIUW4\n\t\t\t\t<br><br>\n\t\t\t\tIch habe die Dev-Tools (speziell den Tab \"App\") verwendet, um zu prüfen, was bereits für die PWA vorhanden ist und was noch fehlt.\n\t\t\t\t<br><br>\n\t\t\t\tIch habe mit der \"manifest.json\" Datei angefangen und diese mit allen benötigten Parametern angelegt. <br>\n\t\t\t\tAnschließend habe ich einen Service Worker erstellt und diesen für die Webseite registriert.\n\t\t\t\tDer Service Worker behandelt das bereitstellen von statischen Ressourcen aus dem Cache und von\n\t\t\t\tdynamischen Ressourcen entweder aus dem Web oder im Offline Betrieb auch aus dem Cache.\n\t\t\t\t<br><br>\n\t\t\t\tFür die Verwendung von HTTPS habe ich lokal einen Node-Express Server erstellt, der mit HTTPS startet.\n\t\t\t\tDie benötigten Zertifikate habe ich mit openssl erstellt und eingebunden. Den LitElement WWW-Navigator\n\t\t\t\tkonnte ich dabei so von Aufgabe 8.3 übernehmen.\n\t\t\t\t<br><br>\n\t\t\t\tDie abschließende Analyse wurde mit Lighthouse durchgeführt. Da Lighthouse auf dem lokalen Server\n\t\t\t\tnicht funktioniert hatte, habe ich die PWA auf den Github-Server kopiert und die PWA von da aus analysiert.\n\t\t\t</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Beschreiben Sie hier Ihre Probleme und Lösungskonzepte:</h2>\n\t\t\t<p>Das erste Problem war die erfolgreiche Registrierung des Service Workers. Es stellte sich heraus,\n\t\t\t\tdass dieser lokal nur unter Verwendung von HTTP korrekt eingebunden werden konnte. Für die Erstellung\n\t\t\t\teiner PWA ist allerdings HTTPS eine Vorauusetzung. Die PWA wurde also zunächst unter HTTP entwickelt\n\t\t\t\tund später wurde dann auf HTTPS umgestellt.\n\t\t\t\t<br><br>\n\t\t\t\tDas zweite Problem bereitete die Nutzung von HTTPS. Dies war unter Verwendung von XAMPP als lokalen\n\t\t\t\tServer nicht ohne weiteres möglich. Um dieses Problem zu umgehen habe ich alternativ auf einen Node-Express\n\t\t\t\tServer gesetzt, der HTTPS unterstützt.\n\t\t\t\t<br><br>\n\t\t\t\tDas dritte Problem schließlich war die Analyse der PWA mittels Lighthouse. Dies war auf dem lokalen\n\t\t\t\tServer nicht möglich und musste deshalb auf einem öffentlichen Server durchgeführt werden.</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Geben Sie hier Ihre Lighthouse-Messergebnisse für Ihre PWA ein:</h2>\n\t\t\t<iframe src=\"lighthouse.html\"></iframe>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Download der PWA:</h2>\n\t\t\t<p>\n\t\t\t\t<a href=\"files/pwa.zip\">pwa.zip</a>\n\t\t\t</p>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://developer.mozilla.org/de/docs/Web/Progressive_web_apps",
          "https://developers.google.com/web/tools/lighthouse",
          "https://www.youtube.com/watch?v=E8BeSSdIUW4"
        ]
      }
    ]
  },
  {
    "name": "Übung 10 - Vue",
    "learningObjectives": [
      "Vue-Instanzen konfigurieren können",
      "Vue-Komponenten schreiben können",
      "Single File Vue Components erstellen können",
      "Mit Vue SPAs erstellen können",
      "In Vue SPAs Routing einbauen können",
      "Mit Vuex State Management umsetzen können"
    ],
    "items": [
      {
        "heading": "Komponente in Vue.js",
        "name": "Übung 10.1",
        "task": "Schreiben Sie eine Vue.js Single File Component mit einem Text-Eingabefeld und 3 Ausgabefeldern, in denen man während des Tippens sehen kann, (a) wie viele Buchstaben (b) wie viele Leerzeichen und (c) wie viele Worte man in das Text-Eingabefeld bereits eingegeben hat.\n\nBetten Sie Ihre Komponente in eine Webseite zweimal ein und testen Sie, ob beide Komponenten unabhängig voneinander sind.",
        "content": [
          {
            "code": "<html><head><title>Vue Hello World</title><script defer=\"defer\" src=\"js/vue10-1.js\"></script></head><body><div id=\"app\"></div></body></html>",
            "type": "Vue",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Vue.js Single File Component",
            "code": "<template>\n  <div class=\"eingabe\">\n    <input type=\"text\" v-model=\"inputText\" />\n    <p>\n      <b>Number letters:</b>\n      <span>{{ letters }}</span>\n    </p>\n    <p>\n      <b>Number spaces:</b>\n      <span>{{ spaces }}</span>\n    </p>\n    <p>\n      <b>Number words:</b>\n      <span>{{ words }}</span>\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'eingabe',\n  data() {\n    return {\n      inputText: \"\",\n      letters: 0,\n      spaces: 0,\n      words: 0\n    }\n  },\n  methods: {},\n  watch: {\n    inputText(val) {\n      if (val === '') {\n        this.letters = 0;\n        this.spaces = 0;\n        this.words = 0;\n      } else {\n        let numberWords = 0;\n        let numberLetters = 0;\n        const words = val.split(\" \");\n        for (let char of val) {\n          if (char != \"\" && /^[a-zA-Z]+$/.test(char)) {\n            numberLetters++;\n          }\n        }\n        for (let word of words) {\n          if (word != \"\") {\n            numberWords++;\n          }\n        }\n        this.letters = numberLetters;\n        this.spaces = words.length - 1;\n        this.words = numberWords;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.eingabe {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 22px;\n  margin: 30px auto;\n  background: #ddd;\n  width: fit-content;\n  -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n  box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n}\ninput {\n  margin-bottom: 5px;\n}\np {\n  margin: 15px 0 0;\n}\nspan {\n  float: right;\n}\n@media (min-width: 768px) {\n  .eingabe {\n    margin-right: 30px;\n    display: inline-block;\n  }\n}\n</style>\n",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Webseite, auf der die Komponente mehrfach eingebunden wird",
            "code": "<template>\n  <div id=\"app\">\n    <h2>Komponente in Vue.js</h2>\n    <eingabe/>\n    <eingabe/>\n  </div>\n</template>\n\n<script>\nimport eingabe from './components/eingabe.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    eingabe\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  padding: 20px;\n  background: #fff;\n}\n#app h2 {\n  margin-top: 0;\n}\n@media (min-width: 768px) {\n  #app {\n    padding: 60px 80px;\n  }\n}\n</style>\n",
            "type": "HTML",
            "showCode": true,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://vuejs.org/",
          "https://vuejs.org/guide/essentials/component-basics.html",
          "https://vuejs.org/guide/scaling-up/sfc.html"
        ]
      },
      {
        "heading": "Menü-Komponente",
        "name": "Übung 10.2",
        "task": "Schreiben Sie eine möglichst flexible Vue.js Single File Component für Menüs und wenden Sie diese in derselben Webseite zweimal an, einmal horizontal, das andere Mal vertikal.",
        "content": [
          {
            "headline": "Menü-Komponente",
            "code": "<html>\n<head>\n<title>Vue Hello World</title>\n<meta charset=\"utf-8\"/>\n<script defer=\"defer\" src=\"js/vue10-2.js\"></script>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>",
            "type": "Vue",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Vue.js Single File Component",
            "code": "<template>\n  <div class=\"menu\" :class=\"direction\">\n    <ul>\n      <li v-for=\"item in menuItems\" :key=\"item.id\">\n        <button :class=\"item.active ? 'active' : ''\" @click=\"navigate(item)\">{{ item.name }}</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'custom-menu',\n  data() {\n    return {\n\n    }\n  },\n  props: {\n    menuItems: Array,\n    direction: String\n  },\n  methods: {\n    navigate(activeItem) {\n      for (const menuItem of this.menuItems) {\n        menuItem.active = false;\n      }\n      activeItem.active = true;\n      console.log(this.menuItems);\n      this.$emit('navigate', activeItem);\n    }\n  },\n  watch: {\n\n  }\n}\n</script>\n\n<style scoped>\n.menu.horizontal ul {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0;\n}\n.menu.horizontal ul li {\n  margin-right: 10px;\n  margin-top: 10px;\n}\nul {\n  list-style: none;\n  padding: 0;\n}\n.vertical button {\n  display: block;\n  margin-top: 15px;\n  width: 100%;\n}\nbutton {\n  background: #6A709F;\n  color: black;\n  border-radius: 20px;\n  text-decoration: none;\n  padding: 4px 30px;\n  margin: 0 5px;\n  font-weight: bold;\n  font-family: Arial;\n  border: 2px outset #F9FBFC;\n  font-size: 14px;\n  cursor: pointer;\n}\nbutton:hover,\nbutton.active {\n  background: #fff;\n  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);\n}\n</style>",
            "type": "Vue",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Webseite, auf der die Komponente mehrfach eingebunden wird",
            "code": "<template>\n  <div id=\"app\">\n    <h2>Menü-Komponente</h2>\n    <div class=\"menuContainer\">\n      <custom-menu :menuItems=\"menuHorizontal\" direction=\"horizontal\" @navigate=\"navigate\" />\n    </div>\n    <div class=\"menuContainer\">\n      <custom-menu :menuItems=\"menuVertical\" direction=\"vertical\" @navigate=\"navigate\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport customMenu from './components/menu.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    customMenu\n  },\n  data() {\n    return {\n      menuHorizontal: [\n        {\n          id: 1,\n          name: 'Menüpunkt 1',\n          target: '#'\n        },\n        {\n          id: 2,\n          name: 'Menüpunkt 2',\n          target: 'https://www.google.de'\n        },\n        {\n          id: 3,\n          name: 'Menüpunkt 3',\n          target: 'gfdjghkdfjgh'\n        }\n      ],\n      menuVertical: [\n        {\n          id: 1,\n          name: 'Menüpunkt 1',\n          target: 'lkfhöljkf'\n        },\n        {\n          id: 2,\n          name: 'Menüpunkt 2',\n          target: 'https://www.youtube.com'\n        },\n        {\n          id: 3,\n          name: 'Menüpunkt 3',\n          target: '#'\n        }\n      ]\n    }\n  },\n  methods: {\n    navigate(target) {\n      console.log(target);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  padding: 20px;\n  background: #fff;\n}\n#app h2 {\n  margin-top: 0;\n}\n#app .menuContainer {\n  background: #ddd;\n  -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n  box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n  border-radius: 5px;\n  padding: 15px;\n  margin-bottom: 30px;\n  width: fit-content;\n}\n@media (min-width: 768px) {\n  #app {\n    padding: 60px 80px;\n  }\n\n}\n</style>",
            "type": "Vue",
            "showCode": true,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://vuejs.org/",
          "https://vuejs.org/guide/essentials/component-basics.html",
          "https://vuejs.org/guide/scaling-up/sfc.html"
        ]
      },
      {
        "heading": "Vue.js WWW-Navigator",
        "name": "Übung 10.3",
        "task": "Schreiben Sie Ihren WWW-Navigator als SPA in Vue.js (optional: mit Vue Router und/oder mit Vuex als State Manager).",
        "content": [
          {
            "headline": "Vue.js WWW-Navigator",
            "code": "<html>\n<head>\n<title>Vue Hello World</title>\n<script defer=\"defer\" src=\"js/vue10-3.js\"></script>\n<meta charset=\"utf-8\"/>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "Entscheidungsprozess und Download",
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Entscheidungsprozess und Download</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tmargin: 15px 0 0;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h3>Entscheidungsprozess und Download</h3>\n\t\t<div class=\"item\">\n\t\t\t<h2>\n\t\t\t\tDokumentieren Sie Ihren Entscheidungsprozess: In welche Komponenten wollen Sie Ihre App zerlegen?\n\t\t\t\tWie soll das State Management implementiert werden?\n\t\t\t</h2>\n\t\t\t<p>\n\t\t\t\tDie App wird wie bereits in Übung 7 durchgeführt in insgesamt <u>drei</u> Komponenten zerlegt. <br>\n\t\t\t\tDie Hauptkomponente (<i>App.vue</i>) bildet das Grundgerüst für die komplette Anwendung. In dieser Hauptkomponente\n\t\t\t\tist der <b>WWW-Navigator</b> als eigenständige Komponente eingebunden und ist für die Darstellung und Aktualisierung\n\t\t\t\tder Navigation und des Inhalts zuständig. Die Dritte Komponente bildet schließlich die <b>Menü-Komponente</b>,\n\t\t\t\twelche für vertikale und horizontale Menüs genutzt werden kann. Sie stellt die einzelnen Menüpunkte im\n\t\t\t\tWWW-Navigator dar und fängt bei der Navigation des Nutzers durch die Anwendung die Klick-Events ab.\n\t\t\t\tDiese werden dann an den WWW-Navigator weitergeleitet und dort verarbeitet.\n\t\t\t</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Download der Lösung:</h2>\n\t\t\t<p>\n\t\t\t\t<a href=\"files/www-navigator-vue.zip\">www-navigator-vue.zip</a>\n\t\t\t</p>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "headline": "App.vue",
            "code": "<template>\n  <div id=\"app\">\n    <www-navigator></www-navigator>\n  </div>\n</template>\n\n<script>\nimport wwwNavigator from './components/wwwNavigator.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    wwwNavigator\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n}\n</style>",
            "type": "Vue",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "wwwNavigator.vue",
            "code": "<template>\n  <div class=\"gridContainer\">\n    <div class=\"header\">\n      <h2>Header</h2>\n      <custom-menu direction=\"horizontal\"\n                   type=\"main\"\n                   :menuItems=\"mainMenu\"\n                   @navigate=\"updateSubnav\"\n      ></custom-menu>\n    </div>\n    <div class=\"leftSide\">\n      <custom-menu direction=\"vertical\"\n                   type=\"sub\"\n                   :menuItems=\"activeSubMenuItems\"\n                   @navigate=\"updateContent\"\n      ></custom-menu>\n    </div>\n    <div class=\"mainContent\">\n      {{ mainContent }}\n    </div>\n    <div class=\"rightSide\">\n      <a v-for=\"reference in references\" :key=\"reference\" :href=\"reference\">{{ reference }}</a>\n    </div>\n    <div class=\"footer\">\n      <h2>Footer:\n        <span>\n          <a href=\"#\">Sitemap</a>\n          <a href=\"#\">Home</a>\n          <a href=\"#\">News</a>\n          <a href=\"#\">Contact</a>\n          <a href=\"#\">About</a>\n        </span>\n      </h2>\n    </div>\n  </div>\n</template>\n\n<script>\nimport customMenu from './menu.vue';\nimport jsonMainMenu from '../assets/nav_horizontal_main.json';\nimport jsonSubMenu from '../assets/nav_vertical_sub.json';\n\nexport default {\n  name: 'www-navigator',\n  components: {\n    customMenu\n  },\n  data() {\n    return {\n      mainContent: \"\",\n      references: [],\n      mainMenu: jsonMainMenu,\n      subMenu: jsonSubMenu,\n      activeSubMenuItems: []\n    }\n  },\n  methods: {\n    updateSubnav(item) {\n      const activeLinkname = item.name;\n      for (const subItem of this.subMenu) {\n        if (subItem.name == activeLinkname) {\n          this.activeSubMenuItems = subItem.items;\n        }\n      }\n      this.mainContent = \"\";\n      this.references = [];\n    },\n    updateContent(item) {\n      this.mainContent = item.content;\n      this.references = item.references;\n    }\n  },\n}\n</script>\n\n<style scoped>\n  h2 {\n    font-weight: normal;\n    margin:  0;\n  }\n  .gridContainer {\n    display: grid;\n    grid-template: auto 1fr auto / auto 1fr auto;\n    margin: 10px;\n    border-radius: 10px;\n    color:  white;\n    text-align: center;\n  }\n  .header {\n    background: #c04f50;\n    border-radius: 10px 10px 0 0;\n    padding: 0 5px 15px;\n  }\n  .header, .footer {\n    grid-column: 1 / 4;\n  }\n  .leftSide, .rightSide {\n    padding: 10px 2rem;\n    background: #C28280;\n    grid-column: 1 / 4;\n  }\n  .mainContent {\n    background: #6D9FBF;\n    overflow-y: auto;\n    padding: 20px;\n    text-align: left;\n    font-family: Arial;\n    grid-column: 1 / 4;\n  }\n  .rightSide a {\n    word-break: break-all;\n  }\n  .footer {\n    background: black;\n    padding-bottom: 15px;\n    border-radius: 0 0 10px 10px;\n  }\n  .footer a {\n    color: white;\n    font-size: 14px;\n  }\n\n  @media (min-width: 600px) {\n    .gridContainer {\n      height: 95%;\n    }\n    .header .nav,\n    .leftSide .nav {\n      display: block;\n    }\n    .leftSide, .rightSide {\n      padding: 10px 20px;\n      max-width: 8rem;\n    }\n    .leftSide .nav a {\n      display: block;\n      padding: 4px 10px;\n    }\n    .leftSide {\n      grid-column: 1 / 1;\n    }\n    .mainContent {\n      grid-column: 2 / 2;\n    }\n    .rightSide {\n      grid-column: 3 / 3;\n    }\n  }\n\n  @media (min-width: 1200px) {\n    .leftSide, .rightSide {\n      max-width: 10rem;\n      padding: 10px 2rem;\n    }\n  }\n</style>\n",
            "type": "Vue",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "menu.vue",
            "code": "<template>\n  <div class=\"menu\" :class=\"direction\">\n    <ul>\n      <li v-for=\"item in menuItems\" :key=\"item.id\">\n        <button :class=\"item.active ? 'active' : ''\" @click=\"navigate(item)\">{{ item.name }}</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'custom-menu',\n  data() {\n    return {\n\n    }\n  },\n  props: {\n    menuItems: Array,\n    direction: String\n  },\n  methods: {\n    navigate(activeItem) {\n      for (const menuItem of this.menuItems) {\n        menuItem.active = false;\n      }\n      activeItem.active = true;\n      console.log(this.menuItems);\n      this.$emit('navigate', activeItem);\n    }\n  },\n  watch: {\n\n  }\n}\n</script>\n\n<style scoped>\n\n.menu.horizontal ul {\n  display: inline-flex;\n}\n\n.menu.horizontal ul li {\n  margin-right: 10px;\n}\n\nul {\n  list-style: none;\n  padding: 0;\n}\n\n.vertical button {\n  display: block;\n  margin-top: 15px;\n  width: 100%;\n}\nbutton {\n  background: #6A709F;\n  color: black;\n  border-radius: 20px;\n  text-decoration: none;\n  padding: 4px 30px;\n  margin: 0 5px;\n  font-weight: bold;\n  font-family: Arial;\n  border: 2px outset #F9FBFC;\n  font-size: 14px;\n  cursor: pointer;\n}\nbutton:hover,\nbutton.active {\n  background: #fff;\n  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.5);\n}\n\n</style>",
            "type": "Vue",
            "showCode": true,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://vuejs.org/",
          "https://vuejs.org/guide/essentials/component-basics.html",
          "https://vuejs.org/guide/scaling-up/sfc.html"
        ]
      }
    ]
  },
  {
    "name": "Übung 11 - WebAssembly",
    "learningObjectives": [
      "Die Konzepte von WebAssembly erläutern können.",
      "WebAssembly im Browser nutzen können.",
      "WASM in WAT und zurück umwandeln können.",
      "JavaScript-Funktionen in WebAssembly auslagern können.",
      "Performanz von JS und WASM vergleichen können.",
      "WASM aus einer Hochsprache compilieren können.",
      "WebAssembly auf der Kommandozeile mittels WASI ausführen können."
    ],
    "items": [
      {
        "heading": "WebAssembly-Modul von Hand erstellen",
        "name": "Übung 11.1",
        "task": "Erstellen Sie ein WebAssembly-Modul für den größten gemeinsamen Teiler von Hand in WAT, kompilieren Sie diesen mit wat2wasm nach WASM und testen Sie Ihr Modul durch Aufruf mit Parametern aus dem Bereich von 1 bis 100.",
        "content": [
          {
            "code": "(module\n (table 0 anyfunc)\n (memory $0 1)\n (export \"memory\" (memory $0))\n (export \"gcd\" (func $gcd))\n (func $gcd (; 0 ;) (param $0 i32) (param $1 i32) (result i32)\n  (local $2 i32)\n  (block $label$0\n   (br_if $label$0\n    (i32.eqz\n     (get_local $1)\n    )\n   )\n   (loop $label$1\n    (set_local $1\n     (i32.rem_s\n      (get_local $0)\n      (tee_local $2\n       (get_local $1)\n      )\n     )\n    )\n    (set_local $0\n     (get_local $2)\n    )\n    (br_if $label$1\n     (get_local $1)\n    )\n   )\n   (return\n    (get_local $2)\n   )\n  )\n  (get_local $0)\n )\n)\n",
            "type": "WAT",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Code für den Test mit allen Zahlen von 1 bis 100",
            "code": "<!DOCTYPE html>\n<html lang=\"de\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Größter gemeinsamer Teiler</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        .item {\n            margin-bottom: 30px;\n            -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            border-radius: 5px;\n            padding: 15px;\n            background: #ddd;\n        }\n        h2 {\n            margin: 0;\n        }\n        p {\n            margin: 15px 0 0;\n        }\n        @media (min-width: 768px) {\n            .item {\n                width: 66%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h1>Größter gemeinsamer Teiler</h1>\n    <div class=\"item\">\n        <h2>Test mit allen Zahlen von 1 bis 100</h2>\n        <ul class=\"output\"></ul>\n    </div>\n    <div class=\"output\"></div>\n    <script>\n        async function fetchAndInstantiate() {\n            const response = await fetch(\"data/gcd.wasm\");\n            const buffer = await response.arrayBuffer();\n            const wasm = await WebAssembly.instantiate(buffer);\n            const gcd = wasm.instance.exports.gcd;\n            const output = document.querySelector('ul.output');\n            for (let i = 1; i <= 100; i++) {\n                for (let j = 1; j <= 100; j++) {\n                    const newItem = document.createElement('li');\n                    newItem.innerHTML = `Der ggT von <i>${i}</i> und <i>${j}</i> ist: <b>${gcd(i, j)}</b>`;\n                    output.append(newItem);\n                }\n            }\n        }\n        fetchAndInstantiate();\n    </script>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://webassembly.org/",
          "https://webassembly.github.io/spec/core/text/index.html",
          "https://developer.mozilla.org/en-US/docs/WebAssembly"
        ]
      },
      {
        "heading": "Performanz-Messungen und -Vergleich",
        "name": "Übung 11.2",
        "task": "Berechnen Sie, wie viele Primzahlen es bis 100.000 gibt. Implementieren Sie Ihren Algorithmus sowohl in JavaScript als auch in WebAssembly. Vergleichen Sie die Performanz beider Implementierungen.",
        "content": [
          {
            "headline": "Performanz-Messungen und -Vergleich",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Performanz-Messungen und -Vergleich</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        .item {\n            margin-bottom: 30px;\n            -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            border-radius: 5px;\n            padding: 15px;\n            background: #ddd;\n        }\n        h2 {\n            margin: 0;\n        }\n        p {\n            margin: 15px 0 0;\n        }\n        @media (min-width: 768px) {\n            .item {\n                width: 66%;\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"item\">\n    <h2>Wie viele Primzahlen gibt es bis 100.000? Geben Sie hier nur die Anzahl ein:</h2>\n    <p>9592</p>\n</div>\n<div class=\"item\">\n    <h2>Messergebnisse (min, max, avg)</h2>\n    <h3>Es wurden insgesamt 20 Messungen durchgeführt. Dabei kam folgendes Ergebnis heraus:</h3>\n    <p>\n        Der Javascript-Algorithmus hat im Durchschnitt <u>13,7</u> Millisekunden gedauert.\n        Dabei war die schnellste Messung <i>13</i> Millisekunden und die längste Messung <i>15</i> Millisekunden.\n    </p>\n    <p>\n        Der Webassembly-Algorithmus hat im Durchschnitt <u>14,15</u> Millisekunden gedauert.\n        Dabei war die schnellste Messung <i>14</i> Millisekunden und die längste Messung <i>15</i> Millisekunden.\n    </p>\n</div>\n<div class=\"item\">\n    <h2>statistische Analyse (Wie viel Prozent schneller ist WebAssembly?)</h2>\n    <p>\n        Beide Algorithmen waren bei den Messungen in etwa gleich schnell.\n        Der Javascript-Algorithmus brauchte im Schnitt sogar <i>0,45</i> Millisekunden weniger als die Berechnung mit WebAssembly.\n        Das ist ein Performance-Unterschied von etwa <u>3,2</u> Prozent.\n    </p>\n</div>\n<div class=\"item\">\n    <h2>Erklärung für Performanz-Unterschiede</h2>\n    <p>\n        Da die Berechnung der Primzahlen nicht sonderlich komplex ist, kommt der Hardware-Vorteil von WebAssembly in\n        diesem Beispiel nicht so sehr zum Tragen. Beide Algorithmen schaffen die Berechnung in wenigen Millisekunden.\n        Bei komplexeren Berechnungen sollte WebAssembly jedoch schneller sein, da es darauf ausgelegt ist, die Hardware\n        des Computers besser auszunutzen.\n    </p>\n    <p>\n        Verwunderlich ist in diesem Beispiel, dass der Javascript-Algorithmus sogar etwas schneller ist als der WebAssembly-Ansatz.\n        Dies könnte daran liegen, dass der WebAssembly-Code erst noch in die Anwendung geladen werden und von dem Javascript-Interpreter\n        eingelesen werden muss. Die Ausführung der WebAssembly-Berechnung im Javascript-Code könnte dadurch zu den\n        gezeigten Performanz-Einbußen führen.\n    </p>\n</div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "code": "function isPrime(num) {\n    for (let i = 2; i * i <= num; i++)\n        if (num % i === 0)\n            return false;\n    return num > 1;\n}\n\nfunction calcPrimes(start, end) {\n    let numberPrimes = 0;\n    for (let i = start; i < end; i++) {\n        if (isPrime(i)) {\n            numberPrimes++;\n        }\n    }\n    return numberPrimes;\n}\n\nnumberPrimes = calcPrimes(0, 100000);\nconsole.log(`Es gibt ${numberPrimes} Primzahlen im Bereich von 0 bis 100000`);",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "code": "(module\n (table 0 anyfunc)\n (memory $0 1)\n (export \"memory\" (memory $0))\n (export \"isPrime\" (func $isPrime))\n (func $isPrime (; 0 ;) (param $0 i32) (result i32)\n  (local $1 i32)\n  (block $label$0\n   (block $label$1\n    (br_if $label$1\n     (i32.lt_u\n      (get_local $0)\n      (i32.const 2)\n     )\n    )\n    (set_local $1\n     (i32.const 1)\n    )\n    (br_if $label$0\n     (i32.lt_u\n      (get_local $0)\n      (i32.const 4)\n     )\n    )\n    (set_local $1\n     (i32.const 2)\n    )\n    (loop $label$2\n     (br_if $label$1\n      (i32.eqz\n       (i32.rem_u\n        (get_local $0)\n        (get_local $1)\n       )\n      )\n     )\n     (br_if $label$2\n      (i32.le_u\n       (i32.mul\n        (tee_local $1\n         (i32.add\n          (get_local $1)\n          (i32.const 1)\n         )\n        )\n        (get_local $1)\n       )\n       (get_local $0)\n      )\n     )\n    )\n    (return\n     (i32.const 1)\n    )\n   )\n   (set_local $1\n    (i32.const 0)\n   )\n  )\n  (get_local $1)\n )\n)\n",
            "type": "WAT",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "code": "int isPrime(unsigned int number) {\n    if (number <= 1) return 0; // zero and one are not prime\n    unsigned int i;\n    for (i=2; i*i<=number; i++) {\n        if (number % i == 0) return 0;\n    }\n    return 1;\n}",
            "type": "C",
            "showCode": true,
            "visualizeOutput": false
          },
          {
            "headline": "Benchmark",
            "code": "<!DOCTYPE html>\n<html lang=\"de\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Benchmark</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        .item {\n            margin-bottom: 30px;\n            -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            border-radius: 5px;\n            padding: 15px;\n            background: #ddd;\n        }\n        h2 {\n            margin: 0;\n        }\n        p {\n            margin: 15px 0 0;\n        }\n        @media (min-width: 768px) {\n            .item {\n                width: 66%;\n            }\n        }\n    </style>\n</head>\n<body>\n<h1>Benchmark</h1>\n<div class=\"item\">\n    <h2>Benchmark Javascript</h2>\n    <p class=\"outputJS\">\n\n    </p>\n</div>\n<div class=\"item\">\n    <h2>Benchmark WebAssembly</h2>\n    <p class=\"outputWebAssembly\">\n\n    </p>\n</div>\n<div class=\"output\"></div>\n<script>\n    let outputJS, outputWebassembly, numberPrimesJS, timeCalcJS, numberPrimesWebassembly, timeCalcWebassembly;\n    async function fetchAndInstantiate() {\n        const response = await fetch(\"data/isPrime.wasm\");\n        const buffer = await response.arrayBuffer();\n        const wasm = await WebAssembly.instantiate(buffer);\n        const isPrime = wasm.instance.exports.isPrime;\n        console.log(isPrime);\n        outputJS = document.querySelector('.outputJS');\n        outputWebassembly = document.querySelector('.outputWebAssembly');\n\n        let time = new Date();\n        numberPrimesJS = calcPrimesJS(0, 100000);\n        timeCalcJS = new Date() - time;\n        time = new Date();\n        numberPrimesWebassembly = calcPrimesWebassembly(0, 100000, isPrime);\n        timeCalcWebassembly = new Date() - time;\n\n        visualizeOutput();\n    }\n\n    function isPrimeJS(num) {\n        for (let i = 2; i * i <= num; i++)\n            if (num % i === 0)\n                return false;\n        return num > 1;\n    }\n\n    function calcPrimesJS(start, end) {\n        let numberPrimes = 0;\n        for (let i = start; i < end; i++) {\n            if (isPrimeJS(i)) {\n                numberPrimes++;\n            }\n        }\n        return numberPrimes;\n    }\n\n    function calcPrimesWebassembly(start, end, functionWebAssembly) {\n        let numberPrimes = 0;\n        for (let i = start; i < end; i++) {\n            if (functionWebAssembly(i)) {\n                numberPrimes++;\n            }\n        }\n        return numberPrimes;\n    }\n\n    function visualizeOutput() {\n        outputJS.innerHTML = `<p>Im Bereich von <u>0 bis 100.000</u> wurden von dem Javascript-Algorithmus insgesamt\n            <i>${numberPrimesJS}</i> Primzahlen gefunden.</p><p>Der Algorithmus hat dafür insgesamt <b>${timeCalcJS}</b>\n            Millisekunden gebraucht.</p>`;\n        outputWebassembly.innerHTML = `<p>Im Bereich von <u>0 bis 100.000</u> wurden von dem WebAssembly-Algorithmus insgesamt\n            <i>${numberPrimesWebassembly}</i> Primzahlen gefunden.</p><p>Der Algorithmus hat dafür insgesamt\n            <b>${timeCalcWebassembly}</b> Millisekunden gebraucht.</p>`;\n    }\n\n    fetchAndInstantiate();\n</script>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [
          "https://webassembly.org/",
          "https://webassembly.github.io/spec/core/text/index.html",
          "https://developer.mozilla.org/en-US/docs/WebAssembly"
        ]
      }
    ]
  },
  {
    "name": "Übung 12 - Security",
    "learningObjectives": [
      "Unsichere Privatisierung in JavaScript erkennen und beheben können.",
      "Die OWASP Top 10-Schwachstellen benennen können.",
      "Beispiele für die OWASP Top 10-Schwachstellen benennen können.",
      "Die OWASP Top 10-Schwachstellen erkennen und beheben können.",
      "OWASP WebGoat installieren und nutzen können.",
      "OWASP SAMM-Architektur anwenden können.",
      "Sicherheitsanforderungen bereits bei der Anforderungserhebung formulieren und sammeln können."
    ],
    "items": [
      {
        "heading": "Sicherer ArrayWrapper",
        "name": "Übung 12.1",
        "task": "In der Vorlesung wurde ein ArrayWrapper Exploit gezeigt.\n\nAnalysieren Sie die Ursache dieses Exploits.\n\nEntwickeln Sie ein Sicherheitskonzept und eine ArrayWrapper-Lösung, die gegen diesen Exploit gewappnet ist.",
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sicherer ArrayWrapper</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <style>\n        body {\n            font-family: Arial, Verdana;\n            background: #fff;\n            color: #333;\n        }\n        .item {\n            margin-bottom: 30px;\n            -webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n            border-radius: 5px;\n            padding: 15px;\n            background: #ddd;\n        }\n        h2 {\n            margin: 0;\n        }\n        p {\n            margin: 15px 0 0;\n        }\n        @media (min-width: 768px) {\n            .item {\n                width: 66%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"arrayWrapper\">\n        <h1>Sicherer ArrayWrapper</h1>\n        <div class=\"item\">\n            <h2>alter Array-Wrapper</h2>\n            <p><pre><code>\nfunction arrayWrapper() {\n    var array = [...arguments]; // private\n    return {\n        get:function(pos){\n            return array[pos];\n        },\n        set:function(pos,value){\n            array[pos] = value;\n        },\n        append:function(value){\n            array.push(value);\n        }\n    }\n}\n</code></pre></p>\n        </div>\n        <div class=\"item\">\n            <h2>Ursachenanalyse</h2>\n            <p>\n                Das Problem bei dem Array-Wrapper ist, dass bei den <code>set(...)</code>, <code>get(...)</code> und\n                <code>append(...)</code> Funktionen jeder Datentyp übergeben werden kann. Es können also auch\n                Funktionen, wie in dem Beispiel aus der Vorlesung, an die Array-Wrapper Methoden übergeben werden,\n                welche das array manipulieren bzw. auslesen können. In dem Beispiel wird die\n                <code>array.push(...)</code> Funktion mit einer eigenen Implementation überschrieben.\n            </p>\n        </div>\n        <div class=\"item\">\n            <h2>Sicherheitskonzept</h2>\n            <p>\n                Eine Möglichkeit, diese Sicherheitslücke zu beseitigen, besteht darin, als Parameter in den\n                Methoden des Array-Wrappers nur bestimmte Datentypen zuzulassen. Somit kann verhindert werden, dass\n                selbst implementierte Funktionen den Array-Wrapper beeinflussen können. Es muss also geprüft werden,\n                welcher Datentyp als Parameter an die Methoden des Array-Wrappers übergeben wird und welche Datentypen\n                sinnvoll sind. Eine Einschränkung auf beispielsweise Strings oder Integer-Werte könnte das Problem schon beheben.\n            </p>\n        </div>\n    </div>\n</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          },
          {
            "code": "function arrayWrapper() {\n    let array = [...arguments]; // private\n    return {\n        get:function(pos){\n            if (Number.isInteger(pos)) {\n                return array[pos];\n            } else {\n                throw new Error('Wrong Datatype used');\n            }\n        },\n        set:function(pos,value){\n            if (Number.isInteger(pos) && (typeof value === 'string' || value instanceof String)) {\n                array[pos] = value;\n            } else {\n                throw new Error('Wrong Datatype used');\n            }\n        },\n        append:function(value){\n            if (typeof value === 'string' || value instanceof String) {\n                array.push(value);\n            } else {\n                throw new Error('Wrong Datatype used');\n            }\n        }\n    }\n}",
            "type": "Javascript",
            "showCode": true,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/Security"
        ]
      },
      {
        "heading": "WebGoat Injection",
        "name": "Übung 12.2",
        "task": "Installieren Sie WebGoat.\n\nStarten Sie das Docker Image mit WebGoat.\n\nÖffnen Sie die Landing Page von WebGoat.\n\nLösen Sie die Aufgaben in (A1) Injection, SQL Injection (Intro).",
        "content": [
          {
            "code": "",
            "type": "",
            "showCode": false,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/Security",
          "https://github.com/WebGoat/WebGoat#1-run-using-docker"
        ]
      },
      {
        "heading": "WebGoat XSS",
        "name": "Übung 12.3",
        "task": "Installieren Sie WebGoat.\n\nStarten Sie das Docker Image mit WebGoat.\n\nÖffnen Sie die Landing Page von WebGoat.\n\nLösen Sie die Aufgaben in (A7) Cross-Site Scripting (XSS), Cross Site Scripting.",
        "content": [
          {
            "code": "",
            "type": "",
            "showCode": false,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/Security",
          "https://github.com/WebGoat/WebGoat#1-run-using-docker"
        ]
      },
      {
        "heading": "WebGoat Cross-Site Request Forgeries",
        "name": "Übung 12.4",
        "task": "Installieren Sie WebGoat.\n\nStarten Sie das Docker Image mit WebGoat.\n\nÖffnen Sie die Landing Page von WebGoat.\n\nLösen Sie die Aufgaben zu (A8:2013) Request Forgeries, Cross-Site Request Forgeries.",
        "content": [
          {
            "code": "",
            "type": "",
            "showCode": false,
            "visualizeOutput": false
          }
        ],
        "references": [
          "https://developer.mozilla.org/en-US/docs/Web/Security",
          "https://github.com/WebGoat/WebGoat#1-run-using-docker"
        ]
      }
    ]
  },
  {
    "name": "Zusätzlicher Inhalt",
    "items": [
      {
        "heading": "Retrospektive",
        "name": "Retrospektive",
        "task": null,
        "content": [
          {
            "code": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Retrospektive</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Verdana;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t.item {\n\t\t\t\tmargin-bottom: 30px;\n\t\t\t\t-webkit-box-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tbox-shadow: 0 0 10px 0 rgb(0 0 0 / 50%);\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 15px;\n\t\t\t\tbackground: #ddd;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tmargin: 15px 0 0;\n\t\t\t}\n\t\t\tul li {\n\t\t\t\tline-height: 1.33;\n\t\t\t}\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.item {\n\t\t\t\t\twidth: 66%;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"item\">\n\t\t\t<h2>Was war gut?</h2>\n\t\t\t<ul>\n\t\t\t\t<li>Umsetzung des responsiven Designs für Smartphone / Tablet und Desktop Ansichten</li>\n\t\t\t\t<li>Auslagerung des Inhalts in separate JSON Datei und Navigation ausschließlich über JS</li>\n\t\t\t\t<li>Umsetzung der Anwendung mit LitElement Komponenten</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Was hätte besser sein können?</h2>\n\t\t\t<ul>\n\t\t\t\t<li>Sicherheitskonzept</li>\n\t\t\t\t<li>Einteilung der Anwendung in mehr Komponenten (modularerer Aufbau)</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Was habe ich gelernt (größte Learnings)</h2>\n\t\t\t<ul>\n\t\t\t\t<li>Arbeiten mit Grid und Flexbox für die Umsetzung eines responsiven Designs in CSS</li>\n\t\t\t\t<li>Asynchrones Laden von Daten über die Fetch-API mittels Javascript</li>\n\t\t\t\t<li>Eigenständiges Erstellen von interaktiven SVG-Grafiken</li>\n\t\t\t\t<li>Erstellung von Web-Komponenten mit LitElement</li>\n\t\t\t\t<li>Anwendung von PWA-Technologien für die Erstellung einer progressive Web-App</li>\n\t\t\t\t<li>WebAssembly</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<h2>Wo gibt es noch Verbesserungspotential bzw. was würde ich nächstes Mal anders machen?</h2>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\tSchon vor der Umsetzung überlegen, wie die Ansichten auf Smartphone, Tablet und Desktop dargestellt werden sollen <br>\n\t\t\t\t\t<i>(Nachträgliches Optimierungen für verschiedene Bildschirmgrößen ist deutlich aufwändiger)</i>\n\t\t\t\t</li>\n\t\t\t\t<li>Möglichst früh eine sinnvolle Einteilung in Web-Komponenten festlegen (modularer Aufbau)</li>\n\t\t\t\t<li>Frühzeitig gutes Sicherheitskonzept überlegen</li>\n\t\t\t\t<li>evtl. zukünftig anderes Framework für die Umsetzung der Web-Komponenten als LitElement (z.B. Vue)</li>\n\t\t\t\t<li>Intensivere Beschäftigung mit Node und den verfügbaren Node Modulen</li>\n\t\t\t</ul>\n\t\t</div>\n\t</body>\n</html>",
            "type": "HTML",
            "showCode": false,
            "visualizeOutput": true
          }
        ],
        "references": [""]
      }
    ]
  }
]


